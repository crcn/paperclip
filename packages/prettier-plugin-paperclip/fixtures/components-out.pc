<import src="atoms.pc" as="atoms" inject-styles />
<import src="utils.pc" as="utils" />
<import src="__DEPRECATED__typography.pc" as="typography" />
<import src="__DEPRECATED__tailwind.pc" as="tw" />
<import src="./layout.pc" as="layout" />

<!--------------------------------------------

Global styles outside of DS.

--------------------------------------------->


<style>

  // any anchors embedded within these components get styled with the primary color
  * {
    :global(a[href]) {
      color: var(--primary-color, var(--color-gold));
    }
  }
</style>


<!--------------------------------------------

Etcetera

--------------------------------------------->


<!--
  @frame { visible: false }
-->
<div export component as="PageContent" {className?} className:spaceLeft="space-left" className:center="center">
  <style>
    display: flex;
    flex-direction: column;
    width: 100%;
    &.space-left {
      margin-left: 160px;
    }
    &.center {
      margin: 0px auto;
    }
  </style>
  {children}
</div>

<!--------------------------------------------

Buttons

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=1088%3A755

--------------------------------------------->

<style>

._button {
  --primary-button-background: var(--primary-color, var(--color-gold));
  --primary-button-background-2: var(--primary-color, var(--color-gold-dark));
  position: relative;
  padding: 12px 32px;
  background-color: var(--color-offwhite);
  color: var(--color-white);
  border: solid 1px transparent;
  outline: transparent !important;
  cursor: pointer;
  font-weight: 600;
  display: inline-flex;
  font-size: 14px;
  align-items: center;
  letter-spacing: 1px;
  line-height: 1;
  text-align: center;
  text-decoration: none;
  transition: all 250ms;
  border-radius: 3px;
  box-sizing: border-box;
  user-select: none;
  white-space: nowrap;
  text-transform: uppercase;

  :global(&:disabled),
  :global(&[disabled=disabled]),
  &-disabled,
  &.disabled {
    opacity: 0.4;
    pointer-events: none;
  }

  &:not(:disabled) {
    &:hover,
    &:focus {
      background-color: rgba(var(--rgb-white), 0.1);
      border-color: rgba(var(--rgb-white), 0.6);
    }

    &:active {
      border: solid 1px rgba(var(--rgb-white), 0.4);
      background-color: rgba(var(--rgb-white), 0.1);
    }
  }

  &-primary, &[data-primary] {
    background-color: var(--primary-button-background);
    color: var(--color-white);
    border: 1px solid var(--primary-button-background);

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    &:not(:disabled) {
      &:hover,
      &:focus {
        cursor: pointer;
        background-color: var(--primary-button-background-2);
        border: 1px solid var(--primary-button-background-2);
        color: var(--color-white);
      }

      &:active,
      &:focus {
        cursor: pointer;
        background-color: var(--primary-button-background-2);
        border: 1px solid var(--color-white);
        color: var(--color-white);
      }
    }
  }

  &-primary._button-outline {
    background-color: transparent;
    color: var(--primary-button-background);
    border: 1px solid var(--primary-button-background);

    &:not(:disabled) {
      &:hover,
      &:focus {
        cursor: pointer;
        background-color: var(--primary-button-background);
        border: 1px solid var(--primary-button-background);
        color: var(--color-white);
      }

      &:active {
        cursor: pointer;
        background-color: var(--primary-button-background-2);
        border: 1px solid var(--primary-button-background-2);
        color: var(--color-white);
      }
    }
  }

  /* NOTE: Use negative variation instead */
  &-danger {
    &:not(:disabled) {
      &:hover,
      &:focus {
        cursor: pointer;

        /* @apply bg-red; */
      }

      &:active {
        /* @apply bg-red;
        @apply border-white; */
      }
    }
  }

  /* Negative variant is styleguide compliant, prefer over error */
  &-negative {
    background-color: transparent;
    color: #ca3a3a;
    border: 1px solid #ca3a3a;

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    &:not(:disabled) {
      &.hover,
      &:hover,
      &:focus {
        cursor: pointer;
        background-color: #db2632;
        border: 1px solid #ca3a3a;
        color: #fff;
      }

      &:active,
      &:focus {
        cursor: pointer;
        background-color: #b01c25;
        border: 1px solid #b01c25;
        color: #fff;
      }
    }
  }

  &-negative2 {
    background-color: transparent;
    color: #E76E69;
    border: 1px solid #E76E69;

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    &:not(:disabled) {
      &.hover,
      &:hover,
      &:focus {
        cursor: pointer;
        background-color: #E76E69;
        border: 1px solid #E76E69;
        color: #fff;
      }

      &:active,
      &:focus {
        cursor: pointer;
        background-color: #E76E69;
        border: 1px solid #E76E69;
        color: #fff;
      }
    }

    &._button-transparent {
      &.hover, &:hover {
        && {
          color: rgb(221, 63, 57);
        }
      }
    }
  }



  /* button sizes */
  &-large {
    padding: 16px 32px;
    font-size: 1rem;
    letter-spacing: 2px;
  }

  &-small {
    padding: 10px 24px;
    font-size: 0.75rem;
    letter-spacing: 0.5px;
  }

  &-xsmall {
    padding: 6px 16px;
    font-size: 0.6875rem;
  }

  & + & {
    margin-left: 8px;
  }

  &-transparent {
    &&& {
      background: transparent;
      border-color: transparent;
    }
  }

  &-icon {
    display: none;
  }

  &-icon > svg {
    font-size: 1.3em;
    margin: -0.15em 0 -0.15em 0;
  }

  &-preview {
    margin: 10px;
    display: inline-block;
  }

  /* Almost all buttons are uppercased */
  &-resetCase {
    text-transform: none;
    letter-spacing: normal;
    font-weight: 500;
  }

  &-loading {
    align-items: center;

    && {
      color: transparent;
    }
  }

  &-wfull {
    width: 100%;
    text-align: center;
    display: block;
    & + & {
      margin-left: 0;
      margin-right: 0;
    }
  }
}

._button.secondary, ._button:within(:global(.v3)) {
  padding: 8px 16px;
  text-transform: none;
  letter-spacing: normal;
  font-weight: 500;
}
</style>




<!--
  @frame { visible: false }
-->
<div export component as="Help">
  <style>
    padding-bottom:60px;
  </style>
  <div>
    <style>
    display: flex;
    margin: 0 auto;
    width: fit-content;
    align-items: center;
    padding: 26px 24px;
    border: 1px solid var(--gray-gray-60);
    border-radius: 100px;
    box-sizing: border-box;
    font-size: 14px;
    font-weight: 400;
    color: var(--gray-gray-20);
    cursor: default;

    :global(a) {
      color: var(--primary-color, var(--color-gold));
      cursor: pointer;

      &:hover {
        text-decoration: underline;
      }
    }
  </style>
  {icon? && <div>
    <style>
      display: inline-block;
      margin-right: 16px;
    </style>
    {icon}
  </div>}
  {content}
   </div>
</div>

<!--
  @frame { visible: false, width: 1024, height: 768, x: -177, y: -160 }
-->

<button export component as="Button"
  {onClick?}
  className="_button {className?}"
  {tagName?}
  className:small="_button-small"
  className:xsmall="_button-xsmall"
  className:medium="_button-medium"
  className:large="_button-large _large"
  className:large2="_button-large _button-large2"
  className:lighter="_button-lighter"
  className:wide="_button-wide _wide"
  className:grow="_button-grow"
  className:negative="_button-negative _negative"
  className:negative2="_button-negative2"
  className:secondary="secondary"
  className:primary="_button-primary _primary"
  className:outline="_button-outline"
  className:hover="hover"
  className:focus="focus"
  className:active="active"
  className:resetCase="_button-resetCase"
  className:transparent="_button-transparent _transparent"
  className:loading="_button-loading"
  className:v3="v3 secondary"
  className:disabled={disabled?}
  className:wfull="_button-wfull"
  {disabled?}
  data-primary={primary?}
  data-testid={testId?}
  {style?}
  {type?}
>

  <style>
    flex-shrink: 0;
    :self(.v3), &:within(:global(.v3)) {

        padding: 8px 16px;
        font-family: Eina03;
        font-size: 14px;
        font-weight: 600;
        font-stretch: normal;
        font-style: normal;
        line-height: 1.71;
        letter-spacing: 0.32px;
        text-align: center;
        color: var(--white);
        border-radius: 2px;
        background-color: var(--gray-gray-50);
        box-sizing: border-box;
        border-width: 2px;
        white-space: nowrap;


      &:hover,
      &.hover {
        border-width: 2px; // if we don't put it it's overriden somewhere else
        background-color: var(--button-subtle-hover);
        border-color: var(--button-subtle-hover);
      }
      &:active,
      &.active {
        border-width: 2px; // if we don't put it it's overriden somewhere else
        background-color: var(--button-subtle-pressed);
        border-color: var(--button-subtle-pressed);
      }
      &:focus,
      &.focus {
        background-color: var(--border-subtle);
        border: 2px solid var(--primary-color, var(--brand-brand-60));
        box-shadow: inset 0 0 0 2px var(--color-background);
      }

      &._primary {
        background-color: var(--primary-color, var(--brand-brand-60));
        border-color: var(--primary-color, var(--brand-brand-60));
        &:hover,
        &.hover {
          background-color: var(--primary-color,var(--color-gold-400));
          border-color: var(--primary-color, var(--color-gold-400));
        }
        &:active,
        &.active {
          background-color: var(--primary-color, var(--brand-brand-70));
          border-color: var(--primary-color, var(--brand-brand-70));
        }
        &:focus,
        &.focus {
          background-color: var(--primary-color, var(--brand-brand-60));
          border: 2px solid var(--primary-color, var(--brand-brand-60));
          box-shadow: inset 0 0 0 2px var(--color-background);
        }
      }

      &._negative {
        background-color: var(--red-red-40);
        border-color: var(--red-red-40);
        &:hover,
        &.hover {
          background-color: var(--red-red-50);
          border-color: var(--red-red-50);
        }
        &:active,
        &.active {
          background-color: var(--button-destructive-pressed);
          border-color: var(--button-destructive-pressed);
        }
        &:focus,
        &.focus {
          background-color: var(--red-red-40);
          border: 2px solid var(--primary-color, var(--brand-brand-60));
          box-shadow: inset 0 0 0 2px var(--color-background);
        }
      }
      &._transparent {
        background-color: transparent;
        border-color: transparent;
        color: var(--color-white-100);
        &:hover,
        &.hover {
          background-color: var(--interactive-state-hover-alt);
        }
        &:active,
        &.active {
          background-color: var(--interactive-state-focus-alt);
        }
        &:focus,
        &.focus {
          background-color: var(--interactive-state-focus-alt);
          border: 2px solid var(--primary-color, var(--brand-brand-60));
          box-shadow: none;
        }
      }
      &._negative._transparent {
        background-color: transparent;
        border-color: transparent;
        color: var(--color-text-destructive-light);
        &:hover,
        &.hover {
          background-color: var(--interactive-state-hover-alt);
        }
        &:active,
        &.active {
          background-color: var(--interactive-state-focus-alt);
        }
        &:focus,
        &.focus {
          background-color: var(--interactive-state-focus-alt);
          border: 2px solid var(--primary-color, var(--brand-brand-60));
          box-shadow: none;
        }
      }

      &._large {
        padding: 12px 0px;
      }

      &._wide {
        text-align: center;
        display: block;
        margin-left: 0;
        margin-right: 0;
      }
    }
    :self(._button-wide) {
      width: 100%;
    }
    :self(._button-grow) {
      display: flex;
      flex: 1;
      justify-content: center;
    }
    :self(._button-lighter) {
      background: #494949;
    }
    :self(._button-xsmall) {
      padding: 4px 8px;
      font-size: 0.675rem;
      line-height: 1;
    }
    :self(._button-small) {
      padding: 6px 12px;
      font-size: 0.75rem;
      line-height: 1.2;
    }
    :self(._button-large) {
      padding: 12px 24px;
      font-size: 1.25rem;
      line-height: 1.3;
    }
    :self(._button-large2) {
      padding: 12px 0px;
      display: inline-block;
    }
  </style>
  {children}
</button>



<!--
  @frame { title: "<Button />", width: 1024, height: 891, x: -466, y: -2786 }
-->
<utils.Preview export component as="ButtonsPreview">
  <Button className="_button-preview">
    Button
  </Button>

  <Button className="_button-preview" loading>
    Button
    <Spinner />
  </Button>

  <Button className="_button-preview" disabled>
    Button Disabled
  </Button>

  <Button className="_button-preview" negative>
    Negative
  </Button>

  <Button className="_button-preview" primary>
    Primary
  </Button>

  <Button className="_button-preview" primary loading>
    Primary
    <Spinner />
  </Button>

  <Button className="_button-preview" primary outline>
    Primary outline
  </Button>

  <Button className="_button-preview" xsmall>
    xsmall
  </Button>

  <Button className="_button-preview" small>
    Small
  </Button>

  <Button className="_button-preview" medium>
    Medium
  </Button>

  <Button className="_button-preview" large>
    Large
  </Button>

  <Button className="_button-preview" wfull>
    Button width 100%
  </Button>


  <Button className="_button-preview" as="a" href="https://captec.io">
    This is a link
  </Button>

  <Button className="_button-preview" as="a" href="https://captec.io" disabled>
    This is a link
  </Button>

  <Button className="_button-preview" as="a" href="https://captec.io" disabled transparent>
    Transparent button
  </Button>
  <Button className="_button-preview" secondary as="a" href="https://captec.io" primary>
    Secondary
  </Button>
  <span style="--primary-color: #F60">
    <Button className="_button-preview" secondary as="a" href="https://captec.io" primary>
      Primary color override
    </Button>
  </span>
  <span style="--primary-color: #F60">
    <Button className="_button-preview" loading secondary outline as="a" href="https://captec.io" primary>
      Primary color override
      <Spinner />
    </Button>
  </span>
  <Button className="_button-preview" secondary negative2 transparent as="a" href="https://captec.io">
    transparent negate
  </Button>
  <Button className="_button-preview" secondary negative2 transparent as="a" href="https://captec.io" hover>
      Hover transparent negate
  </Button>

  <h4>V3</h4>
  <div class="v3">
    <Button primary>
      regular
    </Button>
  <Button v3 primary hover>
    hover
  </Button>
  <Button v3 primary active>
    active
  </Button>
  <Button v3 primary focus>
    focus
  </Button>
  <Button v3 primary disabled>
    disabled
  </Button>
  </div>

  <br /><br />
  <Button v3 xsmall>
    small
  </Button>
  <Button v3 small>
    small
  </Button>
  <Button v3>
    regular
  </Button>
  <Button v3 large>
    large
  </Button>

  <br /><br />
  <div style="--primary-color: magenta;">
    <Button v3 primary>
      regular
    </Button>
    <Button v3 primary hover>
      hover
    </Button>
    <Button v3 primary active>
      active
    </Button>
    <Button v3 primary focus>
      focus
    </Button>
    <Button v3 primary disabled>
      disabled
    </Button>
  </div>
  <br />
  <Button v3>
    regular
  </Button>
  <Button v3 hover>
    hover
  </Button>
  <Button v3 active>
    active
  </Button>
  <Button v3 focus>
    focus
  </Button>
  <Button v3 disabled>
    disabled
  </Button>
  <br /><br />
  <Button v3 negative>
    regular
  </Button>
  <Button v3 negative hover>
    hover
  </Button>
  <Button v3 negative active>
    active
  </Button>
  <Button v3 negative focus>
    focus
  </Button>
  <Button v3 negative disabled>
    disabled
  </Button>
  <br /><br />
  <Button v3 transparent>
    regular
  </Button>
  <Button v3 transparent hover>
    hover
  </Button>
  <Button v3 transparent active>
    active
  </Button>
  <Button v3 transparent focus>
    focus
  </Button>
  <Button v3 transparent disabled>
    disabled
  </Button>
  <br /><br />
  <Button v3 transparent negative>
    regular
  </Button>
  <Button v3 transparent negative hover>
    hover
  </Button>
  <Button v3 transparent negative active>
    active
  </Button>
  <Button v3 transparent negative focus>
    focus
  </Button>
  <Button v3 transparent negative disabled>
    disabled
  </Button>
</utils.Preview>


<!--------------------------------------------

Tabs

Figma: https://www.figma.com/file/UmeLLVYWuB4Hv180Ov0lDA/Signup-2.0?node-id=505%3A0
Secondary: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3509%3A0

--------------------------------------------->

<!--
  @frame { visible: false, title: "SideNavigation", width: 479, height: 151, x: 152, y: -277 }
-->


<div export component as="TabNavigationContainer" className:slim="slim" className:horizontal="horizontal" className:noPadding="no-padding">
  <style>
    // TODO - horizontal variant
    padding: 0px;
    height: 100%;
    display: flex;
    max-width: 100%;

    &.slim {
      padding: 0px 86px;
      box-sizing: border-box;
    }
    &.horizontal {
      flex-direction: column;
      height: auto;
    }
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="TabNavigationItems" data-testid={testId?} {className?}>
  <div>
    <style>

      height: 100%;
      margin-top: 0px;
      padding: 16px;
      width: 288px;
      background: #1E1E1E;
      box-sizing: border-box;

      &:within(.slim) {
        height: auto;
        background: transparent;
        width: auto;
        padding: 0;
        position: relative;
        margin-top: 32px;
        box-sizing: border-box;

        // need to define min width
        // so that the navigation doesn't shink & grow when items
        // are dynamically added
        min-width: 200px;
      }

      &:within(.horizontal) {
        display: flex;
        align-items: center;
        padding: 0px;
        width: 100%;
        background: transparent;
        height: auto;
        margin-bottom: 32px;
        box-shadow: inset 0px -2px 0px #494949;
      }

      &:within(.no-padding) {
        margin-bottom: 0px;
      }
    </style>
    <div>
      <style>
        display: flex;
        width: 100%;
        flex-direction: column;
        justify-content: space-between;
        &:within(.horizontal) {
          align-items: center;
          flex-direction: row;
          width: 100%;
        }

        :global(a[href]) {
          &:hover {
            text-decoration: none !important;
          }
        }
      </style>
      <div>
        {children}
      </div>
      <div>
        {controls}
      </div>
    </div>

    <!-- bar -->
    <div>
      <style>
        display: none;
        &:within(.slim) {
          display: block;
          width: 1px;
          background: #393939;
          height: 100%;
          position: absolute;
          top: 0px;
          border-radius: 8px;
        }
      </style>
    </div>
  </div>
</div>

<!--
  @frame { visible: false }
-->
<button
  export component as="TabNavigationItem"
  data-testid={testId?}
  {tagName?}
  {onClick}
  className="text-body-medium"
  className:active="active"
>
  <style>
    background: transparent;
    border: none;
    display: block;
    width: 100%;
    padding: 12px 16px;
    box-sizing: border-box;
    border-radius: 2px;
    margin: 8px 0px;
    color: var(--color-text-subdued);

    //styleName: UI / Input;
    font-family: IBMPlexSans;
    font-size: 16px;
    font-style: normal;
    font-weight: 500; // https://usepastel.com/link/31ewm/comment/1373265#/login
    line-height: 24px;
    letter-spacing: 0.15px;
    text-align: left;
    line-height: 1;
    cursor: pointer;
    user-select: none;
    transition: background-color 120ms ease-in-out;

    &:hover {
      background: rgba(255, 255, 255, 0.08);
    }
    &.active,
    &:hover,
    &:within(:global(.active)) {
      color: white;
      outline: none;
    }
    &:first-child {
      margin-top: 0px;
    }
    &:last-child {
      margin-bottom: 0px;
    }
    &:within(.slim) {
      margin: 0;
      padding: 12px 12px 12px 0;
      display: flex;
      align-items: center;
      box-sizing: border-box;
      color: #A2A2A2;
      white-space: nowrap;

      &.active,
      &:within(:global(.active)) {
        color: white;
        background: rgba(255, 255, 255, 0.08);
        white-space: nowrap;
      }

      &:focus {
        color: white;
        background: transparent;
        outline: none;
        background: rgba(255, 255, 255, 0.08);
      }
    }

    &:within(.horizontal) {
      display: inline-block;
      border-radius: 0px;
      background: transparent;
      width: auto;

      padding: 12px 16px;
      margin: 0px;
      &.active {
        color: white;
      }
      box-shadow: inset 0px -2px 0px #494949;
      &.active {
        box-shadow: inset 0px -2px 0px var(--primary-color, var(--brand-brand-50));
      }
    }
  </style>

  <!-- bar -->
  <div>
    <style>
      display: none;

      &:within(:global(.active)) {
        display: block;
        background-color: var(--primary-color, var(--brand-brand-50));
        z-index: 1;
      }

      &:within(.slim) {
        display: block;
        width: 2px;

        flex-shrink: 0;
        margin-right: 28px;
        height: 24px;
        border-radius: 2px;
      }
    </style>
  </div>
  {children}
</button>


<!--
  @frame { visible: false }
-->
<div export component as="AccordionTabNavigationItem" >
  <button data-testid={testId?} {onClick} className="text-body-medium" className:active="active">
    <style>
      background: transparent;
      border: none;
      width: 100%;
      padding: 12px 16px;
      border-radius: 2px;
      margin: 8px 0px;
      color: var(--color-text-subdued);

      //styleName: UI / Input;
      font-family: IBMPlexSans;
      font-size: 16px;
      font-style: normal;
      font-weight: 400;
      line-height: 24px;
      letter-spacing: 0.15px;
      text-align: left;
      cursor: pointer;

      &.active,
      &:hover,
      &:within(:global(.active)) {
        background: rgba(255, 255, 255, 0.08);
        color: white;
        outline: none;
      }

      &:first-child {
        margin-top: 0px;
      }
      &:last-child {
        margin-bottom: 0px;
      }

      &:within(.horizontal) {
        display: inline-block;
        border-radius: 0px;
        background: transparent;
        width: auto;

        padding: 12px 16px;
        margin: 0px;
        &.active {
          color: white;
        }
        box-shadow: inset 0px -2px 0px #494949;
        &.active {
          box-shadow: inset 0px -2px 0px var(--primary-color, var(--brand-brand-50));
        }
      }
    </style>
    <div>
      <style>
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 16px;
      </style>
      {label}
      <button className:hover="hover" className:expanded="expanded" onClick={onExpandClick}>
        <style>
          color: inherit;
          padding: 0px;
          background: none;
          border: none;
          width: 33px;
          height: 33px;
          transition: 0.25s;
          border-radius: 2px;
          &:before {
            transition: 0.25s;
            --size: 22px;
            @include atoms.mask;
            display: inline-block;
            background: currentColor;
            mask-image: url(./feather/chevron-right.svg);
          }

          &.expanded:before {
            transform: rotate(90deg);
          }
        </style>
      </button>
    </div>

  </button>
  <!-- Content -->
  <div>
    <style>
      :self(.expanded) {
        margin-top: 12px;
      }
    </style>
    {children}
  </div>
</div>

<!--
  @tags ["design system"]
  @frame { title: "<TabNavigation slim />", width: 349, height: 227, x: -414, y: -980 }
-->
<utils.Preview>
  <TabNavigationContainer slim>
    <TabNavigationItems>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem active>Another tab</TabNavigationItem>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

  </TabNavigationContainer>
</utils.Preview>



<!--
  @frame { title: "<TabNavigation horizontal />", width: 705, height: 227, x: -1424, y: -312 }
  @tags ["design system"]
-->
<utils.Preview>
  <TabNavigationContainer horizontal>
    <TabNavigationItems>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem active>Another tab</TabNavigationItem>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

  </TabNavigationContainer>
</utils.Preview>


<!--
  @tags ["design system"]
  @frame { title: "<TabNavigation />", width: 419, height: 419, x: 25, y: -997 }
-->
<utils.Preview>
  <TabNavigationContainer>
    <TabNavigationItems>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem active>Another tab</TabNavigationItem>
      <TabNavigationItem>Tab</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

  </TabNavigationContainer>
</utils.Preview>




<!--
  @frame { title: "Combo Preview 2", width: 1326, height: 793, x: -565, y: 425 }
  @tags ["design system"]
-->
<utils.Preview export component as="ComboPreview" flex className="text-body-medium">
  <style>
    --primary-color: rgb(119, 138, 243);
  </style>
  <Topbar slim title="Some Page" logo={<img src="./branded-logo.png" />} />
  <TabNavigationContainer slim>
    <TabNavigationItems>
      <TabNavigationItem>Account Type</TabNavigationItem>
      <a href="#">
        <TabNavigationItem tagName="span" active>
          Company Details
        </TabNavigationItem>
      </a>
      <TabNavigationItem>Insight Requests</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

    <PageContent spaceLeft>
      <style>
        display: flex;
        grid-template-columns: 1fr;
      </style>


      <div>
        <style>
          width: 352px;
          & > * {
            margin-bottom: 32px;
            &:first-child {
              margin-bottom: 0;
            }
          }

        </style>

        <!-- Content -->
        <Detail header title="Page Header" description="brief description" />

        <Card>
          <Detail title="Secure non-dilutive funding" description="I want to explore the Intelligent Credit Market to see both analytics and how Capital can facilitate the fundraising process for my company" />
        </Card>

        <Card>
          <Detail title="Company analytics" description="I am not in need of funding at this time, but would like to utilize the analytics tools of the Intelligent Credit Market to improve my company's performance" />
        </Card>
      </div>

    </PageContent>

      <PageContent spaceLeft>
        <style>
          padding-top: calc(140px - 52px/2);
        </style>
        <Hint>
          We have over 250 investors in the Intelligent Credit Market and hundreds of different types of debt offerings
        </Hint>
      </PageContent>
  </TabNavigationContainer>
</utils.Preview>



<!--
  @tags ["design system"]
  @frame { title: "Combo Preview 1", width: 1312, height: 1439, x: -565, y: 1411 }
-->
<utils.Preview flex className="text-body-medium">
  <Topbar slim title="Some Page" />
  <TabNavigationContainer slim>
    <TabNavigationItems>
      <TabNavigationItem>Account Type</TabNavigationItem>
      <TabNavigationItem active>Company Details</TabNavigationItem>
      <TabNavigationItem>Insight Requests</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

    <PageContent spaceLeft>
      <style>
        display: flex;
        grid-template-columns: 1fr;
      </style>


      <div>
        <style>
          max-width: 800px;
        </style>

        <!-- Content -->
        <Detail header title="Page Header" />

        <Card>
          <div>
            Non-Disclosure Agreement with Capital
          </div>
          <div>
            <Pill>Signed</Pill>
          </div>
        </Card>

        <Detail header title="Investor Fund" />
        <p className="text-body-medium">
          <style>
            color: var(--color-text-subdued);
          </style>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mi egestas nam consectetur bibendum nulla aliquam. Id gravida augue sit habitant lectus ipsum, odio. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mi egestas nam consectetur bibendum nulla aliquam. Id gravida augue sit habitant lectus ipsum, odio.
        </p>

        <div>
          <style>
            display: grid;
            grid-row-gap: 16px;
            margin: 32px 0px;
          </style>
          <Detail horizontal title="Location" description="New York, USA" />
          <Detail horizontal title="Website" description="Lorem Ipsum" />
          <Detail horizontal title="Investment types" description="Mezz Debt, Special Situations, Leveraged, Buyout (LBO), Venture Debt" />
          <Detail horizontal title="Investment range" description="Investment range" />
        </div>

        <Separator />

        <div>
          <style>
            display: flex;
            /* grid-template-columns: 1fr 1fr; */
            grid-column-gap: 16px;
          </style>
          <Card>
            <Detail title={<layout.Box justifySpaceBetween>Some title <_Toggle /></layout.Box>} description="Grant access to [Investor fund] to all the documents you uploaded to the dataroom">
            </Detail>

          </Card>
          <Card>
            <Detail title="Some title" description="Grant access to [Investor fund] to all the documents you uploaded to the dataroom">
            </Detail>
          </Card>
        </div>
      </div>
    </PageContent>
  </TabNavigationContainer>
</utils.Preview>


<!--
  @tags ["design system"]
  @frame { title: "Combo Preview 3", width: 1361, height: 2997, x: 878, y: 1388 }
-->
<utils.Preview className="text-body-medium" flex>
  <style>
    --primary-color: rgb(111, 127, 216);
  </style>
  <TopbarPreview showCoachmark />
  <TabNavigationContainer>
     <TabNavigationItems>
      <TabNavigationItem>Account Type</TabNavigationItem>
      <TabNavigationItem active>Company Details</TabNavigationItem>
      <TabNavigationItem>Insight Requests</TabNavigationItem>
      <TabNavigationItem>Privacy</TabNavigationItem>
    </TabNavigationItems>

    <PageContent spaceLeft>
      <style>
        display: flex;
        grid-template-columns: 1fr;
      </style>


      <div>
        <style>
          width: 832px;
        </style>

        <!-- Content -->
        <Detail header title="Page Header" />

        <div className="space-between-vertical space-between-medium">
          <SetupCard>
            <SetupCardHeader title="Configure your data room" description="Be sure to get this stuff done" />
            <SetupCardItem active title="Configure your data room to activate profile">
              <Checklist description={<a href="#" className="text-link">
                Why is this required?
              </a>}>
                <ChecklistItem complete>
                  Business overview deck
                </ChecklistItem>
                <ChecklistItem>
                  Financial models
                </ChecklistItem>
                <ChecklistItem>
                  Cap table
                </ChecklistItem>
              </Checklist>
            </SetupCardItem>
            <SetupCardItem title="Increase the strength of yor profile (optional)" />
            <SetupCardItem active title="Something else with a smaller checklist">
              <Checklist slim subdued description="Please add any additional documents that you think will help paint a bigger picture of your company">
                <ChecklistItem>
                  Company projections
                </ChecklistItem>
                <ChecklistItem>
                  Market analysis
                </ChecklistItem>
                <ChecklistItem>
                  Audited financials
                </ChecklistItem>
              </Checklist>
            </SetupCardItem>
          </SetupCard>

          <Card padded>
            <div>
              Non-Disclosure Agreement with Capital
            </div>
            <div>
              <Pill>Signed</Pill>
            </div>
            <div>
              <style>
                grid-row-gap: 16px;

                margin-top: 16px;
                box-sizing: border-box;
                position: relative;
                display: flex;
                flex-direction: column;
              </style>
              <Field toggle label="Some checkbox">
                <Checkbox checked />
              </Field>
              <Progress value=".5" />
            </div>
          </Card>


          <Card>
            <style>
              display: flex;
              flex-direction: row;
              position: relative;
            </style>
            <Detail title="Something" description="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc id facilisi amet mattis cras egestas. Euismod odio fermentum." />
            <Separator light vertical />
            <div>
                <style>
                  display: flex;
                  width: 100%;
                  flex-direction: column;
                  grid-row-gap: 16px;
                </style>
              <div>
                <style>
                  display: flex;
                  width: 100%;
                  grid-column-gap: 32px;
                </style>
                <Detail helper title="Step 1" description="State" />
                <Detail helper title="Step 2" description="State" />
                <Detail helper title="Step 3" description="State" />
                <Detail helper title="Step 4" description="State" />
              </div>
              <Progress value=".5" />
              <div className="text-helper color-text-subdued">

                Introduced on January 1, 2020
              </div>
            </div>
          </Card>

          <Accordion label="An accordion" />
          <Accordion label="I'm some content" expanded>
            <AccordionContent>
              <style>
                display: grid;
                grid-template-columns: 1fr 1fr;
                grid-column-gap: 32px;
              </style>
              <FileDropZone acceptedFileTypesLabel="All formats accepted" />
              <Checklist slim description="Follow these instructions">
                <ChecklistItem>Models include balance sheet, profit and loss statement and cashflow</ChecklistItem>
                <ChecklistItem>Segment data by month</ChecklistItem>
                <ChecklistItem>Include at least 12 months of data (if applicable)</ChecklistItem>
              </Checklist>
            </AccordionContent>
          </Accordion>


          <Menu>
            <MenuItem>
              I'm menu item
            </MenuItem>
            <MenuItem>
              I'm menu item
            </MenuItem>
            <MenuItem selected>
              I'm menu item
            </MenuItem>
          </Menu>
        </div>

        <TabNavigationContainer horizontal>
            <TabNavigationItems controls={<span>I'm some controls</span>}>
              <div>

                <TabNavigationItem>I'm a tab</TabNavigationItem>
                <TabNavigationItem active>I'm another tab</TabNavigationItem>
            </div>
            </TabNavigationItems>
          I'm some content
        </TabNavigationContainer>
      </div>
    </PageContent>
  </TabNavigationContainer>
</utils.Preview>


<!--
  @frame { title: "Combo Preview 4", width: 1485, height: 768, x: 2469, y: 1341 }
-->
<utils.Preview export component as="FullSplashPagePreview" flex>
  <style>
    --primary-color: rgb(80, 134, 67);
  </style>
  <TopbarPreview />
  <TabNavigationContainer>
    <TabNavigationItems>
      <TabNavigationItem active> item</TabNavigationItem>
      <TabNavigationItem>another</TabNavigationItem>
    </TabNavigationItems>
    <PageContent spaceLeft>
      <Breadcrumbs padded>
        <BreadcrumbItem>Crumb</BreadcrumbItem>
        <BreadcrumbItem>Crumb</BreadcrumbItem>
      </Breadcrumbs>
      <BlankSlate illustration={<img src="./confetti.png" />} title="Congratulations!" description="Continue to the Loan Documents section to upload a Term Sheet" controls={<Button primary>Continue to Loan Documents</Button>} />
    </PageContent>
  </TabNavigationContainer>
</utils.Preview>

<!--------------------------------------------

Page Header / Detail

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=1204%3A1705

--------------------------------------------->

<!--
  @frame { visible: false }

  !!! NOTE: The implementation of this is exactly what it needs to be. If you need to add
  anything extra, create a new component.
-->

<div export component as="Detail"
  {className?}
  className:header="header"
  className:centered="centered"
  className:horizontal="horizontal"
  className:helper="text-helper"
  className:medium="text-body-medium">
  <style>
    display: block;
    text-align: left;
    cursor: inherit;

    &.header { padding: 32px 0px; }
    &.centered { text-align: center; }
    &.horizontal {
      display: flex;
      align-items: center;
    }
  </style>
  <div className="text-body-medium"
    className:helper="text-helper"
    className:header="text-heading-small">
    <style>
      text-align: inherit;
      cursor: inherit;

      &:within(.horizontal) {
        width: 192px;
        color: #A2A2A2;
      }
    </style>
    {title}
  </div>

  {description? && <div>
    <style>
      color: #A2A2A2;
      margin-top: 8px;
      text-align: inherit;
      cursor: inherit;

      &:within(.horizontal) {
        margin-top: 0px;
        color: #ECEDEE;
      }

      :global(li + li),
      :global(p + p),
      :global(p + ul),
      :global(ul + p) {
        cursor: default;
        margin-top: 12px;
      }

      :global(ul) {
        list-style-type: circle;
      }
    </style>
    {description?}
  </div>}
</div>


<!--
  @tags ["design system"]
  @frame { title: "<Detail />", width: 294, height: 195, x: -88, y: -1385 }
-->


<utils.Preview>
  <Detail title="Detailed item" description="Description of Item" />
  <Detail title={<layout.Box justifySpaceBetween>Title <a>test</a></layout.Box>} description="Description of Item" />
  <Detail header title="Page header" description="Brief description" />
</utils.Preview>


<!--------------------------------------------

Side Navigation

Figma: https://www.figma.com/file/UmeLLVYWuB4Hv180Ov0lDA/Signup-2.0?node-id=505%3A0

--------------------------------------------->



<!--
  @frame { visible: false }
-->
<div export component as="Topbar" className:slim="slim" className:primary="primary">
  <style>
    color: var(--color-text-subdued);
    padding: 20px 34px;
    font-size: 14px;
    display: flex;
    font-weight: 400;
    justify-content: space-between;
    font-family: IBMPlexSans;
    box-sizing: border-box;

    flex-shrink: 0;

    &.primary {
      padding: 0px;
      background: var(--background-color-tertiary);
      height: 48px;
      align-items: stretch;
      color: var(--color-text-subdued);
      font-size: 16px;
    }
  </style>

  <!-- Logo -->
  {slim && <div>
    <style>
      display: flex;
      align-items: center;
      img {
        max-height: 18px;
      }
    </style>
    {logo || <img src="./logo.svg" />}

    <!-- Pipe -->
    {title && <Pipe></Pipe>}
    <div>
      <style>
        white-space: nowrap;
      </style>
      {title}
    </div>
  </div>}

  {primary && <div>
    <style>
      &:within(.primary) {
        display: flex;

        :global(a) {
          display: flex;
          align-items: center;
          padding: 0px 32px;
        }
        :global(img) {
          height: 14px;

          // override tailwind prop
          max-width: unset;
        }
      }
      &:within(.legacy) {
        display: flex;
        cursor: pointer;
        align-items: stretch;
        height: inherit;

        :global(a) {
          height: inherit;
          padding: 8px 32px;
          box-sizing: border-box;
          display: flex;
          align-items: center;
          border: 2px solid transparent;

          &:hover {
            background-color: var(--interactive-state-hover);
            color: var(--white);
          }

          &:focus {
            background-color: var(--interactive-state-focus);
            outline: none;
            border-color: var(--color-gold-400);
          }
        }
        :global(img) {
          height: 30px;
        }
      }
    </style>
    {logo}
  </div>}

  {leftControls && <div>
    <style>
      display: flex;
      width: 100%;
    </style>
    {leftControls?}
  </div>}

  <div>
    <style>
      width: 100%;
      display: flex;
      align-items: stretch;
      justify-content: flex-end;
      :global(div) {
          outline: none;
      }
      &:within(.primary) {
        padding-right: 32px;
      }
    </style>
    {rightControls?}
  </div>
</div>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 128, y: -306 }
-->

<ul export component as="TopbarNavList" {className?}>
  <style>
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: stretch;
    box-sizing: border-box;
    &:within(.legacy) {
      & + & {
        margin-left: 114px;
      }
    }
  </style>
  {children}
</ul>


<!--
  @frame { visible: false, width: 1024, height: 768, x: -20, y: -329 }
-->

<li export component as="TopbarNavListTab" className:active="active">
  <style>

    &:within(.primary) {
      margin-left: 48px;
      &:first-child {
        margin-left: 16px;
      }
      display: flex;

      // div:first-child covers menu items
      :global(& > a, & > div:first-child) {
        color: inherit;
        text-decoration: none;
        font-size: 16px;
        line-height: 24px;
        display: flex;
        align-items: center;
        position: relative;
        transition: 0.2s;


        &:hover {
          color: var(--color-text-primary);
        }

        &.active, &:active, &:global(.tippy-active) {
          color: var(--color-text-primary);
          &:after {
            content: "\00a0";
            display: block;
            width: 100%;
            height: 2px;
            background: var(--primary-color, var(--brand-brand-50));
            border-radius: 2px;
            position: absolute;

            // keep bar in the middle of the bottom
            // line
            top: calc(100% - 1px);
          }
        }
      }
    }

    &:within(.legacy) {
      display: inline-flex;
      align-items: stretch;
      color: #C8C8C8;
      font-size: 14px;
      user-select: none;

      & + & {
        margin-left: 32px;
      }

      /* First child (context menu uses a div wrapper + content div instead of a link) */
      :global(& > a, & > div:first-child) {
        display: flex;
        height: 100%;
        align-items: center;
        padding: 14px;
        padding-left: 16px;
        padding-right: 16px;
        box-sizing: border-box;
        color: inherit;
        text-decoration: none;
        border: 2px solid transparent;
        white-space: nowrap;
        transition: 70ms background-color, 70ms border ease-in-out;

        &:hover {
          background-color: var(--interactive-state-hover);
          color: var(--white);
        }

        &:focus {
          background-color: var(--interactive-state-focus);
          outline: none;
          border-color: var(--primary-color, var(--color-gold-400));
        }
      }
      &.active {
        opacity: 1;
        color: var(--white);
        background-color: var(--gray-gray-90);
      }
    }
  </style>
  {children}
</li>



<!--
  @frame { visible: false }
-->
<button export component as="TopbarHelpButton">
  <style>
    --size: 20px;
    @include atoms.reset;
    @include atoms.mask;
    align-self: center;
    color: #C8C8C8;
    mask-image: url(./feather/help-circle.svg);
  </style>
</button>


<!--
  @frame { visible: false }
-->
<div export component as="TopbarProfileIcon">
  <style>
    background: var(--gray-gray-60);
    margin-left: 40px;
    width: 32px;
    height: 32px;
    align-self: center;
    flex-direction: column;
    justify-content: space-around;
    display: flex;
    text-align: center;
    position: relative;
    font-size: 14px;
    border-radius: 2px;
    user-select: none;
  </style>
  <div>
    <style>
      text-align: center;
    </style>
      {children}
  </div>
</div>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 253, y: -286 }
-->

<div export component as="Pipe">
  <style>
    background: #393939;
    width: 1px;
    flex-shrink: 0;
    height: 100%;
    margin: 0px 28px;
  </style>
</div>

<!--
  @frame { visible: false }
-->
<Topbar export component as="TopbarPreview" {slim?} {title?} primary={!slim} logo={<a href="#"><img src="./logo-primary.svg" /></a>} leftControls={<fragment>
      {!slim && <TopbarNavList>
          <TopbarNavListTab active><a href="#">Home</a></TopbarNavListTab>
          {showCoachmark && <CoachMarkAnchorPreview style="left: 205px; top: 48px;" title="Investor matches" description="This is where you can see capital generated analytics the more data you upload and connect the more insights we can generate">
            <TopbarNavListTab><a href="#">Portfolio</a></TopbarNavListTab>
          </CoachMarkAnchorPreview> || <TopbarNavListTab><a href="#">Portfolio</a></TopbarNavListTab>}
          <TopbarNavListTab><a href="#" className="active">Syndication</a></TopbarNavListTab>
        </TopbarNavList> }
    </fragment>} rightControls={
    <fragment>
      <TopbarHelpButton />
      <TopbarProfileIcon>
        E
      </TopbarProfileIcon>
    </fragment>
  }
/>

<!--
  @tags ["design system"]
  @frame { title: "<Topbar />", width: 886, height: 142, x: -339, y: -1601 }
-->
<utils.Preview export component as="TopbarPreview2">
  <TopbarPreview slim title="Topar" />
  <TopbarPreview title="Topbar" />
</utils.Preview>


<!--------------------------------------------

Side Navigation

Figma: https://www.figma.com/file/UmeLLVYWuB4Hv180Ov0lDA/Signup-2.0?node-id=505%3A0

--------------------------------------------->



<!--
  @frame { visible: false, title: "Card", width: 460, height: 58, x: 122, y: 289 }
-->
<div export component as="Card"
  {onClick?}
  {style?}
  className:hover="hover"
  className:interactive="interactive"
  className:withAction="withAction"
  className:spaced="spaced"
  className:reverse="reverse"
  className="text-body-medium v3 {className?}">
  <style>
    padding: 24px;
    width: 100%;
    box-sizing: border-box;
    transition: 0.2s;

    background: var(--background-color-secondary);
    transition-property: background;

    align-items: flex-start;
    transition: 0.2s;
    transition-property: background;

    &.reverse {
      flex-direction: row-reverse;
    }

    &.interactive {
      cursor: pointer;
      user-select: none;

      &:hover, &.hover {
        background: var(--interactive-state-hover);
      }
    }

    &.withAction {
      display: flex;
    }

    &.spaced + &.spaced {
      margin-top: 32px;
    }
  </style>
  {children}
</div>

<!--
  @frame { title: "<Card />", width: 418, height: 305, x: -892, y: -965 }
  @tags ["design system"]
-->
<utils.Preview padded>
  <Card spaced>
    A card
  </Card>
  <Card interactive spaced hover>
    Interacive card
  </Card>
</utils.Preview>



<!--------------------------------------------

Hint

Figma: https://www.figma.com/file/UmeLLVYWuB4Hv180Ov0lDA/Signup-2.0?node-id=518%3A712

--------------------------------------------->

<!--
  @frame { visible: false, width: 1024, height: 768, x: 397, y: -650 }
-->

<div export component as="Hint" className="text-body-medium {className?}" className:wide="wide">
  <style>
    color: #a2a2a2;
    padding: 32px;
    border-radius: 2px;
    display: inline-block;
    position: relative;
    max-width: 224px;
    box-sizing: border-box;
    flex-shrink: 0;
    height: fit-content;
    &.wide {
      max-width: 350px;
    }
  </style>
  <div>
    <style>
      margin-bottom: 16px;
      @include atoms.mask;
      mask-image: url("./hint.svg");
      --size: 24px;
      width: 24px;
      height: 24px;
      && {
        display: block;
        background: var(--primary-color, var(--brand-brand-50));
      }
    </style>
  </div>
  {children}
</div>


<!--
  @tags ["design system"]
  @frame { title: "<Hint />", width: 439, height: 599, x: 487, y: -1183 }
-->

<utils.Preview export component as="HintPreview">
  <style>
    padding: 42px;
  </style>
  <Hint>
    We have over 250 investors in the Intelligent Credit Market and hundreds of different types of debt offerings
  </Hint>
  <Hint>
    <style>
      --primary-color: rgb(0, 255, 221);
    </style>
    Branded hint
  </Hint>
</utils.Preview>



<!--------------------------------------------

Lozenge

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=2369%3A1908

--------------------------------------------->

<!--
  @frame { visible: false, width: 1024, height: 768, x: 401, y: -134 }
-->
<div export component as="Pill"
  className:bold="bold"
  className:positive="positive"
  className:negative="negative"
  className:notice="notice"
  className:info="info"
  className:secondary="secondary"
  {title?}
  {style?}
>
  <style>
    display: inline-block;
    font-family: IBM Plex Sans;
    font-size: 11px;
    font-style: normal;
    font-weight: 600;
    line-height: 16px;
    letter-spacing: 0.1599999964237213px;
    text-align: left;
    background: #5c5c5c;
    color: #f7f7f7;
    border-radius: 2px;
    padding: 0px 4px;
    width: auto;
    text-transform: uppercase;
    cursor: default;
    user-select: none;
    box-sizing: border-box;

    &.positive {
      @include atoms.greenish;
      &.bold {
        background: #18741F;
        color: white;
      }
    }

    &.negative {
      @include atoms.redish;
      &.bold {
        background: #8D0B13;
        color: white;
      }
    }

    &.notice {
      @include atoms.yellowish;
      &.bold {
        background: #B36B27;
        color: white;
      }
    }

    &.info {
      @include atoms.blueish;
      &.bold {
        background: #00538A;
        color: white;
      }
    }

    &.secondary {
        color: #282828;
        background: #FAFAFA;
    }

    &:within(.company-analyses) {
        background: var(--primary-color, #A38427);
    }
  </style>
  {children}
</div>


<!--
  @frame { title: "<Pill />", width: 421, height: 117, x: 894, y: -1311 }
  @tags ["design system"]
-->
<utils.Preview export component as="PillsPreview" spaced>
  <Pill>Base</Pill>
  <Pill positive>Positive</Pill>
  <Pill negative>Negative</Pill>
  <Pill notice>Notice</Pill>
  <Pill info>Informative</Pill>
  <Pill secondary>Secondary</Pill>

  <Pill bold positive>Bold positive</Pill>
  <Pill bold negative>bold negative</Pill>
  <Pill bold notice>bold notice</Pill>
  <Pill bold info>bold informative</Pill>

</utils.Preview>



<!--------------------------------------------

Modal

Figma: https://www.figma.com/file/UmeLLVYWuB4Hv180Ov0lDA/Signup-2.0?node-id=653%3A156286

--------------------------------------------->

<!--
  @frame { visible: false, width: 1024, height: 768, x: 316, y: -186 }
-->

<div export component as="Modal" className="v3 text-body-medium" className:side="side" className:visible="visible">
  <style>
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0px;
    left: 0px;
    pointer-events: none;
    &.visible {
      pointer-events: initial;
    }
  </style>
  {children}
  {visible && <div onClick={onBackgroundClick}>
    <style>
      background: rgba(0, 0, 0, 0.3);
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0px;
      left: 0px;
      z-index: -1;
    </style>
  </div>}
</div>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 316, y: -186 }
-->

<div export component as="_ModalContent" className:narrow="narrow" className:wide="wide">
  <style>
    background: #393939;
    transition: 0.3s;
    width: 432px;
    margin: 0px auto;
    top: 31%;
    position: relative;
    box-sizing: border-box;
    border-radius: 2px;
    opacity: 0;
    box-shadow: 0px 8px 16px -4px rgba(13, 20, 36, 0.85);
    filter: drop-shadow(0px 0px 1px rgba(13, 20, 36, 0.81));

    &:within(.visible) {
      top: 50%;
      transform: translateY(-50%);
      opacity: 1;
    }

    &:within(.side) {
      border-radius: 0px;

      top: 0px;
      width: initial;
      min-width: 252px;
      height: 100%;
      left: auto;
      right: 0px;
      position: absolute;
      box-shadow: 0px 12px 24px -6px rgba(8, 8, 8, 0.85);
      filter: drop-shadow(0px 0px 1px rgba(8, 8, 8, 0.81));
      display: flex;
      flex-direction: column;
      transform: translateX(100%);
      transition-property: transform;
      transition: 0.2s;
      &:within(.visible) {
        transform: translateX(0%);
      }

      &.narrow { width: 340px; }
      &.wide { width: 432px; }
    }



  </style>

  <!-- Inner -->
  <div className:padded="padded">
    <style>
      height: 100%;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;

      &.padded {
        padding: 32px;
      }
    </style>
    {children}
  </div>

  <!-- Footer -->
  {footer && <div>
    <style>
      display: flex;
      padding: 16px;
      justify-content: flex-end;
      box-sizing: border-box;
    </style>
    {footer?}
  </div>}
</div>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 316, y: -186 }
-->

<div export component as="_ModalHeader">
  <style>
    //styleName: Heading / X;
    font-family: Eina03;
    font-size: 20px;
    font-style: normal;
    font-weight: 600;
    line-height: 32px;
    letter-spacing: 0.0016em;
    text-align: left;

  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<Modal export component as="ModalPreview" {side?} {visible?} {padded?}>
  <_ModalContent {narrow?} {wide?} {padded?} {footer?}>
    {header? && <_ModalHeader>{header?}</_ModalHeader>}
    {children}
  </_ModalContent>
</Modal>

<!--
  @tags ["design system"]
  @frame { title: "<Modal side />", width: 681, height: 509, x: 987, y: -1086 }
-->
<utils.Preview lighter>
  <ModalPreview side visible padded footer={<Button primary>Ok</Button>} header="Header">
    I'm some content!
  </ModalPreview>
</utils.Preview>


<!--
  @frame { title: "<Modal />", width: 694, height: 509, x: 1751, y: -1101 }
  @tags ["design system"]
-->
<utils.Preview lighter>

  <ModalPreview visible padded footer={<Button primary>Ok</Button>} header="Header">
    I'm some content!
  </ModalPreview>
</utils.Preview>


<!--------------------------------------------

BlankSlate

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3214%3A84

--------------------------------------------->


<!--
  @tags ["design system"]
  @frame { visible: false, title: "<BlankSlate />", width: 869, height: 450, x: -594, y: -490 }
-->
<div export component as="BlankSlate" className="v3">
  <style>
    display: flex;
    position: relative;
    width: 100%;
    height: 100%;
    align-items: center;
    text-align: center;
    margin: auto;
  </style>

  <div>
    <style>
      position: relative;
      text-align: center;
      margin: auto;
    </style>

    {illustration && <div>
      <style>
        margin: auto;

        :global(img) {
          display: inline-block;
          max-width: 236px;
          margin: auto;
        }
      </style>
      {illustration}
    </div>}
    <div>
      <style>

        //styleName: Heading / X;
        font-family: Eina03;
        font-size: 20px;
        font-style: normal;
        font-weight: 600;
        line-height: 32px;
        letter-spacing: 0.0016em;

      </style>
      {title}
    </div>

    <div>
      <style>
        //styleName: Body / M;
        font-family: IBM Plex Sans;
        font-size: 16px;
        font-style: normal;
        font-weight: 400;
        line-height: 24px;
        letter-spacing: 0.1599999964237213px;
        text-align: center;
        color: #A2A2A2;
        margin-top: 16px;

      </style>
      {description}
    </div>

    <!-- controls -->
    <div>
      <style>
        margin-top: 32px;
        & > * {
          margin-right: 16px;
          &:last-child {
            margin-right: 0px;
          }
        }
      </style>
      {controls}
    </div>
  </div>
</div>

<!--
  @tags ["design system"]
  @frame { visible: true, title: "<BlankSlate />", width: 869, height: 468, x: -594, y: -492 }
-->

<utils.Preview export component as="BlankSlatePreview">
  <BlankSlate
    title="Blank Slate"
    description="Some description of what to do"
    controls={<fragment>
      <Button primary>Control</Button>
      <Button secondary>Control 2</Button>
    </fragment>} />
</utils.Preview>


<!--------------------------------------------

BlankSlate

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3214%3A84

--------------------------------------------->

<!--
  @frame { visible: false, width: 1024, height: 768, x: 753, y: -495 }
-->

<div export component as="Alert"
  className="text-body-small {className?}"
  className:info="info"
  className:positive="positive"
  className:negative="negative"
  className:notice="notice"
  className:info="info"
  className:toast="toast">
  <style>
    padding: 14px 24px;
    background: #282828;
    border-radius: 2px;
    flex-direction: row;
    display: flex;
    max-width: 600px;
    min-width: 300px;
    box-sizing: border-box;
    justify-content: space-between;
    &.info {
      @include atoms.blueish;
    }
    &.positive {
      @include atoms.greenish;
    }
    &.negative {
      @include atoms.redish;
    }
    &.notice {
      @include atoms.yellowish;
    }
  </style>

  <div>
    <style>
      display: flex;
    </style>
    <div>
      <style>
        --size: 1em;
        @include atoms.mask;
        position: relative;
        top: 2px;
        && {
          display: none;
        }
        flex-shrink: 0;
        margin-right: 16px;
        &:within(.negative, .positive, .notice) {
          display: block;
          mask-image: url("./feather/alert-triangle.svg");
        }
        &:within(.info) {
          display: block;
          mask-image: url("./feather/info.svg");
        }
      </style>
    </div>
    <div>
      <style>
        display: inline-block;
      </style>

      <strong>
        <style>
          font-weight: 700;
        </style>
        {title}
      </strong>
      {description? && <span>
        <style>
          font-weight: 400;
        </style>
        &nbsp;– {description?}
      </span>}
    </div>
  </div>
  {closable && <button>
    <style>
      @include atoms.reset;
      --size: 1.3em;
      @include atoms.mask;
      && {
        cursor: pointer;
        position: relative;
        top: 2px;
        margin-left: 32px;
        flex-shrink: 0;
        mask-image: url("./feather/x.svg");
      }
    </style>
  </button>}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="ToastContainer">
  <style>
    position: fixed;
    top: 32px;
    right: 32px;
    display: grid;
    grid-row-gap: 16px;
    grid-template-columns: 350px;
  </style>
  {children}
</div>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 571, y: 110 }
-->
<Alert export component as="Toast" {title} {description?} {info?} {positive?} {negative?} closable>
  <style>

    background: #393939;
    box-shadow: 0px 12px 24px -6px rgba(8, 8, 8, 0.85), 0px 0px 1px rgba(8, 8, 8, 0.81);
    animation: toast-in 0.2s linear;

    @keyframes toast-in {
      0% {
        opacity: 0;
        transform: translateY(10px);
      }
      100% {
        opacity: 1;
        transform: translateY(0px);
      }
    }
  </style>
</Alert>


<!--
  @frame { title: "<Alert />", width: 1024, height: 349, x: 438, y: -500 }
-->
<utils.Preview export component as="AlertPreview" spaced>
  <style>
    & > * {
      display: inline-flex;
    }
  </style>
  <Alert title="Your message" description="make it short & clear." />
  <Alert info title="Your message" closable description="make it short & clear." />
  <Alert positive title="Your message" description="make it short & clear." />
  <Alert negative title="Your message" description="Nam placerat, lectus sed efficitur semper, justo diam scelerisque sapien, nec tristique turpis lacus et nulla. Sed varius lobortis augue, ac consequat dui tristique nec. Ut pretium, mi ac tempor tincidunt, mi nulla vehicula nulla, non semper leo nulla sit amet lacus. Sed ante nulla, finibus id mauris laoreet, egesta" />
  <Alert notice title="Your message" />
</utils.Preview>



<!--
  @frame { title: "<Toast />", width: 407, height: 435, x: 1507, y: -503 }
-->
<utils.Preview export component as="ToastPreview">
  <ToastContainer>
    <Toast title="A toast!" closable />
    <Toast positive title="Cheers!" closable />
    <Toast info title="Salut!" description="Nam placerat, lectus sed efficitur semper, justo diam scelerisque sapien, nec tristique turpis lacus et nulla. Sed varius lobortis augue, ac consequat dui tristique nec. Ut pretium, mi ac tempor tincidunt, mi nulla vehicula nulla, non semper leo nulla sit amet lacus. Sed ante nulla, finibus id mauris laoreet, egesta " closable />
  </ToastContainer>
</utils.Preview>


<!--------------------------------------------

Breadcrumbs

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3532%3A10

--------------------------------------------->

<!--
  @frame { visible: false }
-->
<button export component as="BreadcrumbItem" {onClick?}>
  <style>
    display: inline-block;
    color: var(--primary-color, var(--color-text-link));
    background: transparent;
    outline: none;
    border: none;
    cursor: pointer;
    padding: 0;
    &::before {
      color: var(--primary-color, var(--color-text-link));
      content: "/";
      margin:0px 10px;
    }
    &:first-child::before {
      content: "";
      margin: 0;
    }
    &:last-child {
      color: inherit;
    }
  </style>
  {children}
</button>


<!--
  @frame { visible: false }
-->

<div export component as="Breadcrumbs" className="text-body-medium {className?}" className:padded="padded">
  <style>
    &.padded {
      padding: 16px 0px;
    }
  </style>
  {children}
</div>


<!--
  @frame { title: "<Breadcrumbs />", width: 263, height: 96, x: 2103, y: -468 }
-->

<utils.Preview export component as="BreadcrumbsPreview">
  <Breadcrumbs>
    <BreadcrumbItem>Bready</BreadcrumbItem>
    <BreadcrumbItem>Mc</BreadcrumbItem>
    <BreadcrumbItem>Bread</BreadcrumbItem>
  </Breadcrumbs>
</utils.Preview>


<!--------------------------------------------

Menu

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=23%3A2

--------------------------------------------->
<!--
  @frame { visible: false }
-->

<div export component as="MenuItem" {onClick?} className:selected="selected">
  <style>
    //styleName: UI / Input;
    font-family: IBM Plex Sans;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 24px;
    letter-spacing: 0.1599999964237213px;
    text-align: left;
    display: flex;
    justify-content: space-between;
    padding: 8px 16px;
    box-sizing: border-box;
    white-space: nowrap;
    cursor: pointer;
    &:first-child {
      border-top-left-radius: 2px;
      border-top-right-radius: 2px;
    }
    &:last-child {
      border-bottom-left-radius: 2px;
      border-bottom-right-radius: 2px;
    }
    transition: 0.2s;

    &.selected, &:hover {
      background: rgba(255, 255, 255, 0.12);
    }

  </style>


  <div>
    <style>
    text-overflow: ellipsis;
    overflow: hidden;
    </style>
    {children}
  </div>
  <div>
    {rightControls?}
  </div>
</div>

<!--
  @frame { visible: false }
-->

<div export component as="Menu" className:absolute="_absolute" {className?} {onClick?}>
  <style>
    background: #393939;
    border-radius: 2px;
    &._absolute {
      position: absolute;
      max-width: 200px;
      top: 100%;
      right: 100%;
    }
  </style>
  {children}
</div>

<!--
  @frame { title: "<Menu />", width: 440, height: 331, x: 2544, y: -1107 }
-->

<utils.Preview export component as="MenuPreview">
  <style>
    padding: 32px;
  </style>

  <Menu>
    <style>
      max-width: 300px;
    </style>
    <MenuItem>
      <Field toggle label="Item 1"><Checkbox checked /></Field>
    </MenuItem>
    <MenuItem>
      <Field toggle label="Item 1"><Checkbox disabled /></Field>
    </MenuItem>
    <MenuItem>
      <Field toggle label="Item 1"><Checkbox /></Field>
    </MenuItem>
    <MenuItem rightControls={<Checkbox />}>Item 1</MenuItem>
    <MenuItem selected>Item 1</MenuItem>
    <MenuItem>Item 1</MenuItem>
  </Menu>
</utils.Preview>


<!--

-->

<style>
  @export {
    .tippy-reset {
      background: transparent;
   }
  }
</style>


<!--
  @frame { visible: false }
-->
<div export component as="MenuContainer" {className?}>
  <style>
    position: relative;
    max-width: 200px;
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="MenuButton" {onClick?} className="_menu-button" className:disabled="disabled">
  <style>
    :self {
      --size: 24px;
      @include atoms.mask;
      cursor: pointer;
      mask-image: url(@captec/design-system/src/feather/more-vertical.svg);
      &.disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
    }
  </style>
</div>


<!--
  @frame { title: "More Menu", width: 447, height: 262, x: 5629, y: -282 }
-->
<utils.Preview padded>
  <div>
    <style>
      position: relative;
      left: 200px;
      padding: 20px;
    </style>

    <MenuContainer>
      <MenuButton />
      <Menu absolute>
        <MenuItem>Item</MenuItem>
        <MenuItem selected>Another menu item</MenuItem>
        <MenuItem>Some super long menu item that needs chopping</MenuItem>
      </Menu>
    </MenuContainer>


  </div>
</utils.Preview>




<!--------------------------------------------

Menu

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=23%3A2

--------------------------------------------->

<!--
  @frame { visible: false }
-->

<div export component as="Checkbox" {onClick?} className="checkbox {className?}" type="checkbox"
  className:checked="checked"
  className:hover="hover"
  className:error="error"
  className:disabled="disabled">
  <style>
    position: relative;
    width: 20px;
    height: 20px;
    display: inline-block;
    padding: 2px;
    box-sizing: border-box;
    border-radius: 4px;
    --checkbox-color: transparent;
    --checkbox-border-color: #A2A2A2;
    flex-shrink: 0;

    // make it transparent
    --checkbox-text-color: transparent;

    &:hover, &.hover {
      background: rgba(255, 255, 255, 0.12);

    }

    &.checked {
      --checkbox-color: var(--primary-color, var(--brand-brand-50));
      --checkbox-border-color: var(--checkbox-color);
      --checkbox-text-color: #282828;
    }

    &.error {
      --checkbox-color: var(--color-icon-destructive-dark);
      --checkbox-border-color: var(--checkbox-color);
    }

    &.disabled {
      --checkbox-color: #494949;
      --checkbox-border-color: var(--checkbox-color);
      /* --checkbox-text-color:  #494949; */
      &.checked {
        --checkbox-color: #494949;
        --checkbox-text-color: #282828;
      }
    }
  </style>

  <input type="checkbox" {checked} {disabled}>
    <style>
      opacity: 0;
      position: absolute;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 100%;
    </style>
  </input>

  <!-- faux checkbox -->
  <div>
    <style>
      width: 100%;
      height: 100%;
      border-radius: 2px;
      position: relative;
      box-sizing: border-box;
      background: var(--checkbox-color);
      box-shadow: inset 0px 0px 0px 2px var(--checkbox-border-color);
    </style>
    <div>
      <style>
        --size: 12px;
        color: var(--checkbox-text-color);
        @include atoms.mask;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);

        &:within(.checked) {
          mask-image: url("./feather/check.svg");
        }
      </style>
    </div>
  </div>
</div>

<!--
  @frame { title: "<Checkbox />", width: 246, height: 214, x: -895, y: -1323 }
-->

<utils.Preview export component as="CheckboxPreview" spaced>
  <Checkbox />
  <Checkbox hover />
  <Checkbox checked />
  <Checkbox checked hover /><br />
  <Checkbox error />
  <Checkbox error hover />
  <Checkbox error checked />
  <Checkbox error checked hover /><br />
  <Checkbox disabled />
  <Checkbox disabled checked />
  <br />

  <Field toggle label="Checkbox field">
    <Checkbox />
  </Field>
</utils.Preview>


<!--
  @frame { title: "Notes", width: 619, height: 978, x: -1873, y: -1431 }
-->
<utils.Note>
  <p>Most of these components should have an associated React component with them. If not, reach out to <strong>Craig</strong> to build that.</p>
  <p><strong>99%</strong> of your UI should come from this file. If this file is missing an element that is somewhat re-usable, please add it here.</p>
  <p>For any new component, please add a preview of all variants so that we have visual regression coverage.</p>
  <p>Smaller like Typography, Colors, Spacing, and mixins can go in atoms.pc</p>
</utils.Note>




<!--------------------------------------------

Accordion

Figma: https://www.figma.com/file/FmPs3shc8Lq6ixWWSZaBc1/Syndication-%2F-Discovery-2021?node-id=2075%3A1355

--------------------------------------------->



<!--
  @frame { visible: false, width: 1024, height: 768, x: -177, y: -355 }
-->
<div export component as="Accordion" data-testid={testId?} className="text-body-medium {className?}">
  <style>
    background: #282828;
    border-radius: 2px;
    color: var(--gray-gray-10);
    border-radius: 2px;
    background-color: var(--gray-gray-70);

    & + & {
      margin-top: 16px;
    }
  </style>

  <!-- Header -->
  <div onClick={onHeaderClick?} data-testid={headerTestId?}>
    <style>
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px;
      padding-right: 8px;
    </style>
    {label}
    <button className:hover="hover" className:expanded="expanded" onClick={onExpandClick}>
      <style>
        color: inherit;
        padding: 0px;
        background: none;
        border: none;
        width: 33px;
        height: 33px;
        transition: 0.25s;
        border-radius: 2px;
        /* :self(:hover), :self(.hover) {
          background: #1E1E1E;

        } */
        &:before {
          transition: 0.25s;
          --size: 22px;
          @include atoms.mask;
          display: inline-block;
          background: currentColor;
          mask-image: url(./feather/chevron-right.svg);
        }

        &.expanded:before {
          transform: rotate(90deg);
        }
      </style>
    </button>
  </div>

  <!-- Content -->
  <div className:expanded="expanded">
    <style>
      height: 0;
      overflow: hidden;

      :self(.expanded) {
        margin-top: 12px;
        height: auto;
      }
    </style>
    {children}
  </div>
</div>


<!--
  @frame {  visible: false,width: 1024, height: 768, x: -42, y: -310 }
  @tags ["atom", "needs generalizing"]
-->

<div export component as="AccordionContent" {className?} className:noBottomPadding="no-bottom-padding" {style?}>
  <style>
    padding: 0px 16px;
    padding-bottom: 16px;
    &.no-bottom-padding {
      padding-bottom: 0px;
    }
  </style>
  {children}
</div>



<!--
  @frame { title: "<Accordion />", width: 361, height: 236, x: 3054, y: -1116 }
-->
<utils.Preview>
  <Accordion label="Something" />
  <Accordion label="Something" expanded>
    <AccordionContent>
      Some content
    </AccordionContent>
  </Accordion>
</utils.Preview>


<!--

-->



<!--
  @frame { visible: false }
-->
<div
  export component as="_Toggle"
  {onClick?}
  data-testid={testId?}
  className="__checkbox-input"
  className:on="on"
  tabIndex="0"
  aria-roledescription="button"
>
  <style>
    display: inline-block;
    flex-shrink: 0;
    width: 40px;
    height: 20px;
    padding: 2px 7px 2px 2px;
    border-radius: 14px;
    background-color: var(--gray-gray-50);
    position: relative;
    box-sizing: content-box;
    transition: background-color 70ms ease-in-out;

    &:hover {
      background-color: var(--interactive-state-hover);
      cursor: pointer;
    }

    &:focus {
      background-color: var(--interactive-state-focus);
      outline: 0;
    }

    &.on {
      background: var(--primary-color, #A38427);
    }

  </style>

  <div>
    <style>
      border-radius: 20px;
      position: absolute;
      width: 20px;
      height: 20px;
      margin: 0 5px 0 0;
      background-color: var(--gray-gray-10);
      transition: 0.2s;
      &:within(.on) {
        transform: translate(calc(100% + 5px));
      }
    </style>
  </div>

  <div>
    <style>
      --size: 13px;
      @include atoms.mask;
      mask-image: url(./feather/x.svg);
      position: absolute;
      top: 50%;
      left: 100%;
      transform: translate(calc(-100% - 7px), -50%);
      transition: 0.2s;
      &:within(.on) {
        opacity: 0;
      }
    </style>
  </div>

  <div>
    <style>
      --size: 13px;
      @include atoms.mask;
      mask-image: url(./feather/check.svg);
      position: absolute;
      top: 50%;
      transform: translate(4px, -50%);
      transition: 0.2s;
      &:within(.__checkbox-input:not(.on)) {
        opacity: 0;
      }
    </style>
  </div>
</div>


<!--
  @frame { visible: false }
-->
<div export component as="__DEPRECATED__ToggleField" className="text-body-medium" {onClick} data-testid={testId?} className={className?}>
  <style>
    display: flex;
    align-items: center;
  </style>
  {children}
  <label>
    <style>
      cursor: pointer;
      display: inline;
      padding: 0;
      margin-left: 16px;
      font-family: IBMPlexSans;
      font-size: 16px;
      font-weight: normal;
      font-stretch: normal;
      font-style: normal;
      line-height: 1.5;
      letter-spacing: 0.16px;
      text-align: left;
      color: var(--gray-gray-20);
      user-select: none;

      &:hover {
        color: var(--color-white);
      }
    </style>
    {label}
  </label>
</div>


<!--
  @frame { title: "<Toggle />", width: 509, height: 228, x: 2563, y: -470 }
  @tags ["needs generalizing","atom"]
-->
<utils.Preview export component as="TogglePreview" padded className="v3">
  <_Toggle />
  <_Toggle on />

  <div>
    <_Toggle  />
  </div>

  <div>
    <Field toggle label="Toggle this on">
      <style>
        --primary-color: rgb(0, 170, 99);
      </style>
      <_Toggle on />
    </Field>
  </div>
</utils.Preview>

<!--

  Tooltip

  Figma: https://www.figma.com/file/FmPs3shc8Lq6ixWWSZaBc1/Syndication-%2F-Discovery-2021?node-id=1933%3A2013
-->


<!--
  @frame { visible: false }
-->
<div export component as="TooltipContainer" {className?}>
  <style>
    position: relative;
    cursor: default;
    &:hover {
      .tooltip {
        opacity: 1;
      }
    }
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="Tooltip" className="tooltip {className?}" className:visible="visible" className:center="center">
  <style>

    z-index: 1000;
    --offset: 12px;
    opacity: 0;
    transition: 0.2s;
    top: 100%;
    transform: translateY(var(--offset));
    position: absolute;
    cursor: help;

    // min width 20ch, bet you've never seen this used before huh!
    // I hand't and it's cool!
    width: max-content;
    /* min-width: 22ch; */
    padding: 8px 16px;
    /* backgroundColor / secondary.alt */
    background: #FAFAFA;
    border-radius: 2px;

    /* Body / S */
    font-family: IBM Plex Sans;
    font-style: normal;
    font-weight: normal;
    font-size: 14px;
    line-height: 20px;

    /* or 143% */
    letter-spacing: 0.16px;

    /* colorText / subdued.alt */
    color: #5C5C5C;

    &.visible {
      opacity: 1;
    }

    &.center {
      transform: translateY(var(--offset)) translateX(-20px);
      left: 50%;
    }


    &:before {
      --size: 10px;
      content: "\00a0";
      background: #FAFAFA;
      width: var(--size);
      height: var(--size);
      display: block;
      position: absolute;
      left: 16px;
      top: calc(var(--size)/-2);
      transform: rotate(45deg);
    }

    &:empty {
      display: none;
    }
  </style>
  {children}
</div>


<!--
  @frame { title: "<Tooltip />", width: 350, height: 180, x: 3522, y: -1122 }
-->
<utils.Preview export component as="TooltipPreview" className="v3" spaced>
  <TooltipContainer>
    <Tooltip>
      Companies that you have already been introduced to
    </Tooltip>
    <Button primary>bottom placement</Button>
  </TooltipContainer>
</utils.Preview>



<!--
Drop Zone
-->



<!--
  @frame { visible: false }
-->
<div export component as="FileDropZone" {className?} data-testid="file-drop-zone" {style?}>
  <!-- Drop -->
  <div className:fileHover="file-hover" className:invalid="invalid" {onDragEnter} {onDragExit} {onDrop}>
    <style>
      border: 1px dashed #525252;
      border-radius: 2px;
      padding: 80px 16px;
      text-align: center;
      font-size: 14px;
      position: relative;
      transition: 0.2s;
      box-sizing: border-box;

      &:hover {
        background-color: rgb(158, 158, 158, 0.1);
      }

      &.file-hover {
        border: 1px solid rgb(158, 158, 158);
      }

      &.invalid {
        border: 2px dashed #DD4542;
      }
    </style>

    <div>
      <style>
        //styleName: Body / S;
        font-family: IBM Plex Sans;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.15px;
        text-align: center;
        color: var(--color-text-subdued);

        // Want to make this absolutely positioned so that
        // the size of the drop zone doesn't change when the content updates
        // (mainly from valid to invalid states)
        @include atoms.absolute-center;

        a {
          text-decoration: none;
          color: var(--primary-color, var(--brand-brand-60));
        }
      </style>

      {!invalid && <span>
         Drop files or click

        <a href="#" onClick={onUploadClick?}>
          here
        </a>

        to upload
      </span>}

      {invalid && <strong className="text-body-small">
        <style>
          color: var(--color-text-destructive-light);
          font-weight: 500;
        </style>
        {invalidFileMimeTypeErrorText? || "File type invalid"}
      </strong>}
      {acceptedFileTypesLabel? && <div>
        <style>
          margin-top: 8px;
          font-size: 12px;
          opacity: 0.8;
        </style>
        {acceptedFileTypesLabel?}
      </div>}
    </div>
    <input type="file" onChange={onFileUploadChange} onClick={onFileUploadClick} {accept?}>
      <style>
        position: absolute;
        top: 0;
        left: 0;
        cursor: pointer;
        width: 100%;
        height: 100%;
        opacity: 0;
      </style>
    </input>
  </div>
</div>


<!--
  @frame { title: "<FileDropZone />", width: 503, height: 608, x: 3159, y: -872 }
-->
<utils.Preview padded>
  <style>
    display: flex;
    grid-row-gap: 30px;
    flex-direction: column;
  </style>
  <FileDropZone  acceptedFileTypesLabel="PDF, JPG only" />
  <FileDropZone invalid accept=".pdf, .jpg, .gif" acceptedFileTypesLabel="PDF, JPG only" />
  <FileDropZone invalid accept=".pdf, .jpg, .gif" invalidFileMimeTypeErrorText="Wrong file type!" acceptedFileTypesLabel="PDF, JPG only" />
</utils.Preview>



<!--------------------------------------------

SetupCard

Figma: https://www.figma.com/file/wcXfWK0PKL7kiTKwrYGIy4/Onboarding-2.0-(in-app)?node-id=876%3A782

--------------------------------------------->

<!--
  @frame { visible: false }
-->
<div export component as="SetupCard" className="v3">
  <style>

    & > :first-child {
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
      }
    & > :last-child {
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
      }

    & + & {
      margin-top: 36px;
    }

  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="SetupCardHeader"
  className:active="active"
>
  <style>
    background: #282828;
    display: flex;
    align-items: flex-end;
    justify-content: space-between;
  </style>
  <div>
    <style>
      padding: 26px;
      &.active {
        background: #393939;
      }
    </style>
    <div>
      <style>
        //styleName: Body / Lg;
        font-family: IBM Plex Sans;
        font-size: 18px;
        font-style: normal;
        font-weight: 400;
        line-height: 32px;
        letter-spacing: 0em;
        text-align: left;
        cursor: default;

      </style>
      {title}
    </div>
    <div>
      <style>
        //styleName: Body / S;
        font-family: IBM Plex Sans;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.1599999964237213px;
        text-align: left;
        color: #a2a2a2;
        cursor: default;

      </style>
      {description?}

      {action && <div>
        <style>
          margin-top: 24px;
        </style>
      {action}</div>}
    </div>
  </div>
  <div>
    <style>
      margin-right: 104px;
      display: flex;
    </style>
    {graphic?}
  </div>
</div>


<!--
  @frame { visible: false }
-->
<div export component as="CheckCircleIcon" className:small="small" {className?}>
  <style>
      transition: 0.2s;
      background: var(--primary-color, var(--check-color, var(--brand-brand-50)));
      border-radius: 9999px;
      display: flex;
      padding: 3px;
      --size: 20px;
      &.small {
        --size: 18px;
        padding: 1px;
      }

      color: #282828;
  </style>
  <i>
    <style>
      @include atoms.mask;
      color: var(--background-color);
      mask-image: url("./feather/check.svg");
    </style>
  </i>
</div>


<!--
  @frame { visible: false }
-->
<div export component as="SetupCardItem" {onClick} className:complete="complete" className:lockedReason="lockedReason" className:active="active">
  <style>
    --background-color: #282828;
    background: var(--background-color);
    padding: 26px;
    &.active {
      --background-color: #393939;
    }
    cursor: pointer;

    //styleName: Body / S;
    font-family: IBM Plex Sans;
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px;
    letter-spacing: 0.15px;
    text-align: left;

    &.lockedReason {
      cursor: not-allowed;
    }
  </style>
  <div>
    <style>
      display: flex;
      align-items: center;
      //styleName: Body / S (emphasis);
      font-family: Eina03;
      font-size: 14px;
      line-height: 20px;
      letter-spacing: 0.3px;
      text-align: left;
      color: var(--color-text-subdued);
      user-select: none;
      &:within(.active) {
        color: white;
      }

    </style>
    {complete && <CheckCircleIcon>
      <style>
        margin-right: 18px;
      </style>
    </CheckCircleIcon>}

    {!complete && <TooltipContainer>
      <style>
          margin-right: 16px;
          padding: 0px 4px;
      </style>
      {lockedReason && <Tooltip center>{lockedReason?}</Tooltip>}
      <i>
        <style>
          --size: 20px;
          @include atoms.mask;
          mask-image: url("./feather/chevron-right.svg");
          transition: 0.2s;
          &:within(.active) {
            transform: rotate(90deg);
          }
          &:within(.lockedReason) {
            transform: 0deg;
            mask-image: url("./feather/lock.svg");
          }
        </style>
      </i>
    </TooltipContainer>}
    {title}
    {optional? && <span>
      <style>
        margin-left: 12px;
      </style>
      <Pill>Optional</Pill>
    </span>}
    {button?}
  </div>
  <div>
    <style>
      margin-left: 44px;
      margin-right: 44px;

    </style>
    {subtitle && <div>
      <style>
        margin-top: 2px;
        //styleName: Body / S;
        font-family: IBM Plex Sans;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.15px;
        text-align: left;
        color: #a2a2a2;

      </style>
      {subtitle?}
    </div>}

    {active && <div>
      <style>
        margin-top: 12px;
        /* max-height: 0px; */
        overflow: hidden;
        &:empty {
          display: none;
        }
      </style>
      {children?}
    </div>}
  </div>
</div>



<!--
  @frame { title: "<SetupCard />", width: 752, height: 509, x: 2107, y: -175 }
-->

<utils.Preview padded>
  <SetupCard>
    <SetupCardHeader active title="Something" graphic={<img src="./demo-graphic.svg" />} description="Lorem ipsum dolor sit amet, consectetur adipiscing elit. " />
    <SetupCardItem active title="Something" subtitle="To complete your investor facing profile lorem ipsom dolor sit amit dolor fun ascit">
      <Button primary>
        Get started
      </Button>
    </SetupCardItem>
    <SetupCardItem complete title="Something" subtitle="To complete your investor facing profile lorem ipsom dolor sit amit dolor fun ascit" />
    <SetupCardItem title="Something" lockedReason="You can’t do this yet. Please configure your dataroom first. You’ll then need to validate your profile before it’s live and shown to investors" />
  </SetupCard>
</utils.Preview>



<!--------------------------------------------

Checklist

--------------------------------------------->

<!--
  @frame { visible: false }
-->

<div export component as="Checklist"
  className:subdued="subdued"
  className:slim="slim"
  className:padded="padded"
  {style?}
>
  <style>
        position: relative;
        box-sizing: border-box;
        &.subdued {
          color: var(--color-text-subdued);
        }

        &.padded {
          padding: 24px;
        }
      </style>
  <div>
  <style>
  display: flex;
  flex-direction: row;
  align-items: centerflex-start;
  padding: 0px;
  </style>
  {icon? && <div>
      <style>
        display: inline-block;
        margin-right: 5px;
      </style>
      {icon}
    </div>}
    <span>{description}</span>
  </div>
  <div>
    <style>
      z-index: 1;
      position: relative;
    </style>
    {children}
  </div>
</div>


<!--
  @frame { visible: false }
-->
<div export component as="ChecklistItem" className:complete="complete">
  <style>
    display: flex;
    align-items: center;
    --check-color: #494949;
    &.complete {
      --check-color: unset;
    }
    &:within(.slim) {
      margin-top: 8px;
      align-items: flex-start;
    }
    &:last-child {
      .stick {
        display: none;
      }
      .content {
        box-shadow: unset;
      }
    }
  </style>

  <!-- icon fro small checklist items -->
  <div>
    <style>
      display: none;
      margin-right: 16px;
      margin-left: 8px;
      width: 3px;
      height: 3px;
      background: currentColor;
      border-radius: 4px;
      position: relative;
      top: 0.5rem;
      &:within(.slim) {
        display: block;
      }
    </style>
  </div>


  <!-- icon for big checklist items -->
  <div>
    <style>
      position: relative;
      margin-right: 32px;
      &:within(.slim) {
        display: none;
      }
    </style>
    <CheckCircleIcon small />
    <div className="stick">
      <style>
        &:within(.slim) {
          display: none;
        }
        background: #494949;
        width: 2px;
        height: 36px;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        top: calc(100% + 4px);
        border-radius: 2px;
      </style>
    </div>
  </div>

  <div className="content">
    <style>
      box-shadow: inset 0px -1px 0px #5C5C5C;
      width: 100%;
      padding: 22px 0px;

      //styleName: Body / S;
      font-family: IBM Plex Sans;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: 20px;
      letter-spacing: 0.15px;
      text-align: left;
      color: var(--color-text-subdued);
      &:within(.slim) {
        padding: 0px;
        box-shadow: unset;
      }

      &:within(.complete) {
        color: white;
      }

    </style>
    {children}
  </div>
</div>


<!--
  @frame { title: "<Checklist />", width: 556, height: 381, x: 3743, y: -196 }
-->
<utils.Preview padded export component as="ChecklistPreview">
  <Checklist description="Something descriptive">
    <ChecklistItem complete>
      I'm an item
    </ChecklistItem>
    <ChecklistItem complete>
      I'm an item
    </ChecklistItem>
    <ChecklistItem>
      I'm an item
    </ChecklistItem>
  </Checklist>
</utils.Preview>

<!--
  @frame { title: "<Checklist slim />", width: 556, height: 381, x: 3121, y: -193 }
-->
<utils.Preview padded export component as="ChecklistPreview2">
  <Checklist slim description="Some description about the checklist">
    <ChecklistItem>
      I'm an item
    </ChecklistItem>
    <ChecklistItem>
      I'm an item
    </ChecklistItem>
    <ChecklistItem>
      I'm an item
    </ChecklistItem>
  </Checklist>
</utils.Preview>


<!--------------------------------------------

TextInput

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=1088%3A755

--------------------------------------------->

<style>
  @export {
    @mixin input_icon {
      @include atoms.mask {
        --size: 1rem;
      }
      display: inline-block;
      padding: 0!important;
      margin: 0;
      background: currentColor;
      border: none;
      cursor: pointer;
      border-radius: 4px;

      z-index: 99;
      right: 14px;
      top: 50%;
      transform: translateY(-50%);
      color: white;
      display: inline-block;
      position: absolute;
      opacity: 0.7;
      border-radius: 3px;

      :self(&:hover),
      :self(&:focus) { opacity: 1; }
      :self(&:focus) { border: 2px solid white; }
      :self(&:disabled) { opacity: 0.2; cursor: not-allowed; }
    }

    // need __prefix because styles outside of paperclip are
    // overriding styles here.
    .__input {
      display: block;
      width: 100%;
      padding: 10px 16px 8px;
      border-radius: 3px 3px 0 0;
      font-size: 14px;
      font-weight: 400;
      line-height: 1.5;
      color: white;
      border: none;
      background-color: rgba(
        46,
        45,
        42,
        0.9
      ); /* had to modify this one bc of dark backgrounds */
      box-sizing: border-box;
      border-bottom: 1px solid #575752; /* border at the bottom */
      transition: border 120ms ease-in-out;

      /* Override chrome autofill styles */
      /* stylelint-disable-next-line no-descending-specificity */
      &:-webkit-autofill,
      &:-webkit-autofill:hover,
      &:-webkit-autofill:focus,
      &:-webkit-autofill:active,
      &:-internal-autofill-selected,
      &.active {
        && {
          -webkit-text-fill-color: white;
        }
      }

      &::placeholder {
        user-select: none;
        opacity: 0.65;
        color: inherit;
      }

      &:not(:disabled):hover {
        background-color: rgba(46, 45, 42, 1);
        border-bottom: 1px solid #c7c7c7; /* border at the bottom */
      }

      &:focus,
      &:not(:disabled):active, &:not(:disabled).active {
        outline: none;
        background-color: rgba(46, 45, 42, 1);
      }

      &:not(select):read-only {
        &:focus,
        &:active {
          @include tw.bg-black-400;
        }
      }

      &--large {
        @include tw.px-4;
        @include tw.py-3;
        font-size: 0.875rem;
      }

      &--small {
        @include tw.px-4;
        @include tw.py-1;
        font-size: 0.8125rem;
      }

      &--xsmall {
        @include tw.px-4;
        @include tw.py-0;
        font-size: 0.75rem;
      }

      &__label {
        @include typography.font-main;
        @include tw.text-white;
        display: block;
        opacity: 0.5;
        transition: opacity 70ms ease-in-out;
      }

      &--hasError {
        @include tw.text-red;
      }

      &__icon {
        &:hover,
        &:focus {
          @include tw.text-white;
        }
      }

      & button.icon-button {
        background: transparent;
        border: none;
        padding: 0;
        margin: 0;
        color: inherit;
        font-size: 1.2em;
        transition: color 250ms;
        outline: none;
        cursor: pointer;

        &:hover,
        &:focus {
          color: white;
        }
      }

      &:disabled {
        cursor: not-allowed;
        opacity: 0.5;
      }

      &:-internal-autofill-selected,
      &:-internal-autofill-hover {
        -webkit-box-shadow: 0 0 0px 1000px #2f2e2c inset; // for chrome autofill styles
        color: #F2F2F2;
      }
    }

    .secondary_input {
      @include typography.family-body;

      display: block;
      width: 100%;
      padding: 8px  16px;
      box-sizing: border-box;
      font-size: 1rem;
      font-weight: 400;
      line-height: 1;
      background-color: #2f2e2c;
      border: 1px solid #4F4F4F;
      border-radius: 2px;
      color: #F2F2F2;
      transition: border 120ms ease-in-out;

      &::placeholder {
        user-select: none;
        opacity: 0.65;
        color: inherit;
      }

      &:not(:disabled):hover, &:not(:disabled):active, &:focus, &:not(:disabled).active {
        && {
          outline: none;
          background-color: #2f2e2c;
          border: 1px solid var(--primary-color, #bf972f);
        }
      }

      &:not(:disabled):hover {
        border: 1px solid var(--color-grey-500);
      }

      &:disabled {
        cursor: not-allowed;
        opacity: 0.5;
      }

      &:-internal-autofill-selected,
      &:-internal-autofill-hover {
        -webkit-box-shadow: 0 0 0px 1000px #2f2e2c inset; // for chrome autofill styles
        color: #F2F2F2;
      }
    }
  }

</style>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 363, y: 817 }
-->
<button
  export component as="Clear"
  type="button"
  {onClick?}
  className:hidden="hidden"
>
  <style>
    @include input_icon;
    mask-image: url(feather/x.svg);
    &.hidden { display: none; }
  </style>
</button>


<!--
  @frame { visible: false }
-->
<button
  export component as="Eye"
  type="button"
  {onClick?}
  className:hidden="hidden"
>
  <style>
    @include input_icon;
    mask-image: url(feather/eye.svg);
    &.hidden { display: none; }
  </style>
</button>


<!--
  @frame { visible: false }
-->
<button
  export component as="EyeOff"
  type="button"
  {onClick?}
  className:hidden="hidden"
>
  <style>
    @include input_icon;
    mask-image: url(feather/eye-off.svg);
    &.hidden { display: none; }
  </style>
</button>


<!--
  @frame { visible: false }
-->
<div export component as="TextInput" {className?}>
  <style>
    position: relative;
  </style>
  <input type={type? || "text"}
  ref={inputRef}
  {tagName?}
  className="__input $tw.appearance-none {inputClassName?}"
  className:secondary="secondary_input secondary_input-text"
  className:v3="v3 v3-text"
  className:v4="v3 v3-text v4"
  className:round="round"
  className:value="has-value"
  className:large="__input--large"
  className:small="__input--small small"
  className:active="active"
  className:hover="hover"
  className:xsmall="__input--xsmall"
  className:darker="darker"
  className:positive="active positive"
  className:warning="active warning"
  className:success="active success"
  className:fail="active fail"
  className:negative="active negative"
  data-testid={testid?}
  {active?}
  {hover?}
  {secondary?}
  {darker?}
  {v3?}
  {v4?}
  {fail?}
  {round?}
  {testid?}
  {small?}
  {xsmall?}
  {hasError?}
  {placeholder?}
  {negative?}
  {positive?}
  {style?}
  {warning?}
  {value?}
  {name?}
  {id?}
  {onFocus?}
  {autoFocus?}
  {onBlur?}
  {defaultValue?}
  {onChange?}
  {onKeyPress?}
  {disabled?}
  {tabIndex?}
  {autoComplete?}>
    <style>

      &:within(:global(.negative)) {
        border-bottom: 2px solid var(--red-red-50) !important;
      }

      &:within(:global(.positive)) {
        border-bottom: 2px solid var(--green-green-50) !important;
      }

      &:within(:global(.v3)), &.v3 {
        @include typography.family-body;
        line-height: 1;
        border: 1px solid #4F4F4F;
        border-color: transparent;
        background-color: var(--background-color-secondary);
        &.positive, &.negative, &.warning, &.focus, &:focus, &.hover, &:hover {
          && {
            background-color: var(--background-color-secondary);
          }
        }
        padding: 12px 16px;
        font-size: 16px;
        border-radius: 4px;
        &&.darker {
          background-color: #282828;
        }

        &:-webkit-autofill {
          &, &:active, &:hover, &:focus {
            -webkit-text-fill-color: white;
            -webkit-box-shadow: 0 0 0 1000px var(--background-color-secondary) inset;
            border-left-color: var(--background-color-secondary);
            border-right-color: var(--background-color-secondary);
            border-top-color: var(--background-color-secondary);
            border-bottom-color: var(--background-color-secondary);
            caret-color: white;
          }
        }
        &&& {
          --input-border-width: 2px;
          border-width: var(--input-border-width);
        }

        &.success, &.positive {
          &&& {
            border-bottom-color: var(--green-green-50);
            border-bottom-width: 2px;

          }
        }
        &.warning {
          &&& {
            border-bottom-color: var(--brand-brand-50);
          }
        }

        &.fail, &.negative {
          &&& {
            border-bottom-color: var(--red-red-50);
            border-bottom-width: 2px;
          }
        }

        &:disabled {
          &&& {
            opacity: 1;
            background-color: var(--gray-gray-50);
            color: var(--gray-gray-30);
          }
        }

        &.small {
          && {
            padding: 12px 16px;
          }
        }

        &:not(:disabled).hover, &:not(:disabled):hover {
          && {
            border-color: var(--primary-color, var(--brand-brand-60));
            border-left:  var(--input-border-width) solid var(--background-color-secondary);
            border-top:  var(--input-border-width) solid var(--background-color-secondary);
            border-right:  var(--input-border-width) solid var(--background-color-secondary);
          }
        }


        &:not(:disabled).active, &:not(:disabled):active, &:focus {
          && {
            border-color: var(--primary-color,  var(--brand-brand-60));
            border-left:  var(--input-border-width) solid var(--background-color-secondary);
            border-top:  var(--input-border-width) solid var(--background-color-secondary);
            border-right:  var(--input-border-width) solid var(--background-color-secondary);
          }
        }
      }
    </style>
  </input>
  {icon? && <div>
    <style>
      position: absolute;
      right: 0px;
      top: 50%;
      button {
        outline: none;
      }
    </style>
    {icon?}
  </div>}
</div>


<!--
  @tags ["atom"]
  @frame { title: "<TextInput />", width: 1024, height: 1344, x: 791, y: -2774 }
-->
<utils.Preview export component as="TextInputPreview">

  <h4>&lt;TextInput /&gt;</h4>
  <TextInput placeholder="Some information" className="$tw.my-1" large />
  <TextInput placeholder="Some information" className="$tw.my-1" />
  <TextInput placeholder="Some information" className="$tw.my-1"small />
  <TextInput placeholder="Some information" className="$tw.my-1" xsmall />
  <TextInput placeholder="Disabled" className="$tw.my-1" disabled />
  <TextInput placeholder="Some information" className="$tw.my-1" large icon={<Clear />} />
  <TextInput placeholder="Some information" className="$tw.my-1" icon={<Clear />} />
  <TextInput placeholder="Some information" className="$tw.my-1" small icon={<Eye />} />
  <TextInput placeholder="Some information" className="$tw.my-1" xsmall icon={<EyeOff />} />
  <TextInput placeholder="Disabled" className="$tw.my-1" disabled icon={<Clear hidden />} />

  <h4>&lt;TextInput secondary /&gt;</h4>
  <TextInput secondary placeholder="placeholder patito" className="$tw.my-1" />
  <TextInput secondary placeholder="placeholder patito" className="$tw.my-1" value="test@test.test" />
  <TextInput secondary placeholder="placeholder patito" className="$tw.my-1" disabled />
  <TextInput secondary placeholder="active text" active className="$tw.my-1" />
  <TextInput type="password" secondary placeholder="password patito" value="Something like this" disabled />


  <h4>&lt;div className="v3"&gt;&lt;TextInput /&gt;&lt;/div&gt;</h4>
  <span className="v3">

    <TextInput placeholder="placeholder patito" className="$tw.my-1" value="test" />
    <TextInput placeholder="placeholder patito" className="$tw.my-1" value="test@test.test" />
    <TextInput placeholder="warning" active className="$tw.my-1" />
    <TextInput placeholder="positive" positive className="$tw.my-1" />
    <TextInput placeholder="negative" negative className="$tw.my-1" />
    <TextInput placeholder="disabled" disabled className="$tw.my-1" />
    <TextInput small placeholder="primary color override" hover className="$tw.my-1">
      <style>
        --primary-color: rgb(255, 0, 200);
      </style>
    </TextInput>
    <TextInput small placeholder="small" className="$tw.my-1" />
    <TextInput tagName="textarea" value="something" small placeholder="small" className="$tw.my-1" />
  </span>
</utils.Preview>


<!--------------------------------------------

Field

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=1088%3A755

--------------------------------------------->


<style>

  .Field {
    line-height: 1.5;
  }

  .label {
    opacity: 0.7;
    letter-spacing: 1.5px;
    font-size: 12px;
    margin-bottom: 8px;
    font-weight: 500;
    display: none;

    &.exists { display: inline-block; }
  }

  .ErrorText {
    display: block;
    cursor: default;
    color: var(--color-red-text);
    font-size: 0.8rem;
    opacity: 0.8;
    margin-bottom: var(--spacing-400);

    &:empty { display: none; }
  }

  .flex {
    display: flex;
    flex-direction: column;
  }
</style>



<!--
  @frame { visible: false, width: 1024, height: 768, x: 107, y: 403 }
-->
<div export component as="Field"
  {onClick?}
  className="Field {className?}"
  className:hidden="hidden"
  className:secondary="secondary_field"
  className:v3="secondary_field v3"
  className:v4="secondary_field v3 v4"
  className:success="success"
  className:positive="positive"
  className:negative="negative"
  className:toggle="toggle"
  className:companyAnalyses="company-analyses"
  className:spaceBottom="space-bottom"
  className:fail="fail"
  className:active="active"
  className:last="_last"
  data-testid={testId?}
  {onFocus?}
  {onBlur?}>
  <style>

    &.inline {
      cursor: pointer;
    }

    &.space-bottom {
      padding-bottom: 24px;
    }

    &.secondary_field, &:within(:global(.v3)) {
      width: 100%;
      margin-bottom: 32px;


      &.secondary_field {
        margin-bottom: 15px;
      }

      label {
        @include typography.family-body;
        font-style: normal;
        font-weight: normal;

        // Needs to match input size
        font-size: 16px;
        line-height: 24px;
        text-transform: initial;
        letter-spacing: normal;
        margin: 0 auto var(--spacing-300);
        transition: opacity 120ms ease-in-out;
        width: 100%;

        &:hover {
          opacity: 0.9;
          cursor: pointer;
        }

        &:empty {
          display: none;
        }
      }

      &:focus-within {
        label {
          opacity: 0.9;
          cursor: pointer;
        }

        input {
          border: 1px solid var(--color-grey-500);
        }
      }
    }

    &.v3, &:within(:global(.v3)) {
      position: relative;
      flex-shrink: 0;


      // defensive coding here in case placeholder is set - they need
      // to _not_ appear since the field label acts as the placeholder.
      // !important is set here because it should definitely _not_ be overridden.
      ::placeholder {
        color: transparent !important;
      }

      // margins exist here because labels are absolutely positioned. Otherwise,
      // this should be left up to the container to set the spacing between each field (via flex / grid + grid-row-spacing)
      margin-top: 56px;
      margin-bottom: 32px;

      // want to eliminate spacing from inline fields
      &.toggle {
        margin-top: 0px;
        margin-bottom: 0px;
      }
      & .hidden {
        display: none;
      }
      label {
        transition: 0.15s;
      }

      &.active, &:focus-within {
        label {
          font-size: 14px;
          top: -6px;
          transform: translateY(-100%);
          text-transform: none;
        }
      }
    }

    &&&.v4 {
      margin-top: 42px;
      margin-bottom: 20px;
      color: #A2A2A2;
    }
  </style>

  <div>
    <style>
      position: relative;

      &:within(.toggle) {
        display: flex;
        flex-direction: row-reverse;
        align-items: center;
        cursor: pointer;

        &:within(.company-analyses) {
          flex-direction: unset;
          justify-content: flex-end;
          margin-bottom: 6px;
        }

        &&:hover {
          label {
            opacity: 1;
          }
        }

        && {
          label {
            top: 0px;
          }
        }
      }
    </style>
    <label className="label" className:label="exists">
      <style>
        &:within(:global(.v3)) {

          // pointer events must be set to "none" so
          // that text inputs are focusable
          pointer-events: none;

          font-family: IBMPlexSans;
          font-size: 12px;
          letter-spacing: 0.16px;
          text-align: left;
          color: var(--gray-gray-20);

          position: absolute;
          z-index: 1;
          top: 50%;
          transform: translateY(-50%);

          // needs to match input font size
          font-size: 16px;
          padding: 0px 14px;
          transition: 0.15s;

        }
        &&&:within(.toggle) {
          position: relative;
          display: inline-block;
          transform: unset;
          color: var(--gray-gray-10);
          padding: 0px 12px;
          font-size: 16px;
          margin-bottom: 0px;

          // Need this to be auto so that elements within the label
          // can be clicked (like links)
          pointer-events: auto;

          &:within(.company-analyses) {
            margin-bottom: 0;
            opacity: 0.8;
            line-height: 20px;
            text-align: right;
          }
        }
      </style>
      {label}
    </label>
    {children}
  </div>
  <div className="subtext">
    <style>
      :self {
        height: 1em;
        margin-top: var(--spacing-1);
        font-size: 0.8rem;
        opacity: 0.8;

        &:empty { display: none; }
      }

      &:within(:global(.v3)) {
        padding-left: 16px;
        color: #A2A2A2;
        opacity: 1;
        position: absolute;

        font-family: IBMPlexSans;
        font-size: 12px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: 1.33;
        letter-spacing: 0.16px;
        text-align: left;

        &:empty {
          display: block;
        }
      }

      &:within(.negative) {
        color: var(--color-text-destructive-light);
      }

      &:within(.positive) {
        color: var(--green-green-30);
      }

      &:within(.success) {
        color: var(--color-text-positive);
      }
      &:within(.fail) {
        color: #E76E69;
      }
    </style>
    {subtext?}
  </div>
</div>


<!--
  @frame { visible: false }
-->
<span export component as="ErrorText" className="ErrorText" {style?}>
  {children}
</span>


<!--
  @frame { title: "Field / v1", width: 1024, height: 768, x: 1990, y: -2778 }
-->
<utils.Preview padded>
  <Field label="Username" subtext="Remember to take your Vitamins">
    <TextInput placeholder="test@test.test" />
  </Field>
  <Field label="Another field 💅" subtext={<ErrorText>That's an invalid input you got there</ErrorText>}>
    <TextInput placeholder="test@test.test" />
  </Field>
  <Field label="Password" subtext={<ErrorText>Password needs exactly 3 digits, and 1 emoji 👏</ErrorText>}>
    <TextInput value="something" password />
  </Field>
  <Field label="Website" subtext="">
    <TextInput />
  </Field>
  <Field label="Website" subtext="Remember to take your Vitamins">
    <TextInput />
  </Field>
</utils.Preview>


<!--
  @frame { title: "<Fied secondary />", width: 1024, height: 768, x: 3142, y: -2774 }
-->
<utils.Preview padded>
  <Field secondary label="Username" subtext="Remember to take your Vitamins">
    <TextInput secondary placeholder="test@test.test" />
  </Field>
  <Field secondary label="Another field 💅" subtext={<ErrorText>That's an invalid input you got there</ErrorText>}>
    <TextInput secondary placeholder="test@test.test" />
  </Field>
  <Field secondary label="Password" subtext={<ErrorText>Password needs exactly 3 digits, and 1 emoji 👏</ErrorText>}>
    <TextInput mode="password" secondary value="something" password />
  </Field>
  <Field secondary label="Website" subtext="">
    <TextInput secondary placeholder="test@test.test" />
  </Field>
  <Field secondary label="Website" subtext="Remember to take your Vitamins">
    <TextInput secondary placeholder="test@test.test" />
  </Field>
</utils.Preview>



<!--
  @frame { title: "Field / v3", width: 649, height: 768, x: 4349, y: -2802 }
-->
<utils.Preview padded className="v3">
  V3
  <br />
  <Field label="Username" subtext="Remember to take your Vitamins">
    <TextInput value="ok"  />
  </Field>
  <Field activ label="Username" subtext="Remember to take your Vitamins">
    <TextInput />
  </Field>
  <Field active label="Username" subtext="Remember to take your Vitamins">
    <TextInput value="Username" />
  </Field>
  <Field active label="Positive" positive subtext="Remember to take your Vitamins">
    <TextInput />
  </Field>
  <Field active label="Negative" negative subtext="Remember to take your Vitamins">
    <TextInput />
  </Field>
  <Field label="Negative" negative subtext="Remember to take your Vitamins">
    <TextInput placeholder="Something" />
  </Field>
  <Field active toggle label={<fragment>I'm a checkbox field and <a href="#">anchor</a></fragment>}>
    <Checkbox />
  </Field>
</utils.Preview>


<!--------------------------------------------

Spinner

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=1088%3A755

--------------------------------------------->

<style>

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(359deg);
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    80% {
      opacity: 0;
    }
    99% {
      opacity: 1;
    }
    100% {
      opacity: 1;
    }
  }

  .throbber {
    --speed: 1s;
    position: absolute;
    top: calc(50% - 0.5rem);
    left: calc(50% - 0.5rem);
    height: 1rem;
    width: 1rem;
    animation: rotate infinite linear, fadeIn 1.4s forwards;

    &--immediate {
      animation: rotate infinite linear;
    }

    & {
      animation-duration: var(--speed, 1s);
    }
  }
</style>


<!--
  @frame { visible: false }
-->
<svg component as="Loading" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
  <g fill="#FFF" fill-rule="nonzero">
    <path fill-opacity=".313" d="M8 15.5a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15zm0-1.667A5.833 5.833 0 1 0 8 2.167a5.833 5.833 0 0 0 0 11.666z"/>
    <path fill-opacity=".6" d="M8 15.5v-1.667a5.833 5.833 0 0 0 .723-11.622L8.927.557A7.501 7.501 0 0 1 8 15.5z"/>
  </g>
</svg>



<!--
  @frame { visible: false }
-->
<div export component as="Spinner" className="throbber" className:immediate="throbber--immediate" style="--speed: {speed?};">
  <Loading />
</div>



<!--

-->


<!--
  @frame { visible: false }
-->
<div export component as="Track">
  <style>
    opacity: 0.5;
    background-color: #252525;
    width: 10px;
    position: absolute;
    overflow: hidden;
    user-select: none;
    height: 100%;
    top: 0;
    right: 0;
  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="Thumb" {className?}>
  <style>
    background-color: #626262;
    width: 10px;
  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="Content" {className?}>
  <style>
    height: 100%;
    box-sizing: border-box;
  </style>
  {children}
</div>

<!--
  @frame { visible: false, width: 1024, height: 768, x: 141, y: 549 }
-->
<div export component as="ScrollablePreview" className="Scrollable">
  <style>
    width: 100%;
    height: 100%;
    display: flex;
    position: relative;
    overflow: hidden;
  </style>

  <!-- Content -->
  <Content>
    <style>
      width: 100%;
      height: 100%;
      position: relative;
      overflow: hidden;
      box-sizing: border-box;
    </style>
    {children}
  </Content>

  <!-- Track -->
  <Track>
    <!-- Knob -->
    <Thumb>
      <style>
        width: 100%;
        height: 100px;
      </style>
    </Thumb>
  </Track>
</div>


<!--
  @frame { title: "<Scrollable />", width: 948, height: 331, x: 4508, y: -694 }
-->
<utils.Preview>

  <h3>A scrollable component for Paperclip previews</h3>

  <ScrollablePreview>
    <div>
      <style>
        width: 100%;
        height: 500px;
        background: rgb(27, 27, 27);
      </style>
    </div>
  </ScrollablePreview>
</utils.Preview>

<!--------------------------------------------

Separator

-------------------------------------------->

<!--
  @frame { visible: false }
-->


<div export component as="Separator" className:light="light" className:vertical="vertical">
  <style>
    height: 1px;
    flex-shrink: 0;
    background: #282828;
    margin: 32px 0px;
    display: flex;
    &.light {
      background: #4E4E4E;
    }
    &.vertical {

      height: auto;
      align-self: stretch;
      width: 1px;
      margin: 0px 32px;
    }
  </style>
</div>


<!--------------------------------------------

Progress

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3778%3A4045

-------------------------------------------->


<!--
  @frame { visible: false, width: 1024, height: 768, x: 0, y: 0 }
-->

<div export component as="Progress" style="--value: {value};">
  <style>
    position: relative;
    box-sizing: border-box;
    width: 100%;
    background: #1A1A1A;
    box-shadow: 0px -100px 80px rgba(0, 0, 0, 0.07), 0px -41.78px 33.4221px rgba(0, 0, 0, 0.0503198), 0px -22.34px 17.869px rgba(0, 0, 0, 0.0417275), 0px -12.52px 10.0172px rgba(0, 0, 0, 0.035), 0px -6.65px 5.32008px rgba(0, 0, 0, 0.0282725), 0px -2.77px 2.21381px rgba(0, 0, 0, 0.0196802);
    border-radius: 2px;
  </style>
  <!-- bar -->
  <div>
    <style>
      background: linear-gradient(270deg, #B7972F 0%, rgba(122, 216, 179, 0.8) 100%);
      box-shadow: 0px -2.77px 2.21381px rgba(0, 0, 0, 0.0196802);
      border-radius: 2px;
      height: 8px;
      transition: 0.5s;
      width: calc(var(--value) * 100%);
    </style>
  </div>
</div>



<!--
  @frame { title: "<Progress value='0-1' />", width: 1024, height: 208, x: 5461, y: -2161 }
-->
<utils.Preview padded>
  <Card>
    <style>
      grid-row-gap: 16px;
      display: flex;
      flex-direction: column;
    </style>
    <Progress value="1" />
    <Progress value=".75" />
    <Progress value=".25" />
  </Card>
</utils.Preview>

<!--------------------------------------------

CoachMark

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3784%3A3346
Other Screens: https://www.figma.com/file/K8sPyiVZGi3LiQ5GfAKjvm/Merge-company?node-id=246%3A1142

-------------------------------------------->

<!--
  @frame { visible: false }
-->
<div export component as="ProgressPills">
  <style>
    display: flex;
    grid-column-gap: 8px;
  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="ProgressPill" className:active="active">
  <style>
    background: #ECEDEE;
    height: 2px;
    width: 16px;
    border-radius: 4px;
    opacity: 0.5;
    transition: 0.2s;
    &.active {
      background: var(--primary-color, #B7972F);
      opacity: 1;
      width: 40px;
    }
  </style>
</div>


<!--
  @frame { title: "<ProgressPills />", width: 368, height: 66, x: 1997, y: 456 }
-->
<utils.Preview padded>
  <ProgressPills>
    <ProgressPill />
    <ProgressPill active />
    <ProgressPill />
    <ProgressPill />
  </ProgressPills>
</utils.Preview>

<!--------------------------------------------

CoachMark

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=3784%3A3346
Other Screens: https://www.figma.com/file/K8sPyiVZGi3LiQ5GfAKjvm/Merge-company?node-id=246%3A1142

-------------------------------------------->

<!--
  @frame { visible: false }
-->
<div export component as="CoachMark" className="v3"
  {className?}
  className:centered="centered"
  >
  <style>
    /* Auto Layout */
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    padding: 32px;

    position: relative;
    width: 384px;

    /* backgroundColor / elevation */
    background: #393939;

    /* 500 */
    box-shadow: 0px 20px 32px -8px rgba(8, 8, 8, 0.85), 0px 0px 1px rgba(8, 8, 8, 0.81);
    border-radius: 2px;
    &.centered {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 3;
    }

  </style>
  {steps}
  <Detail {title?} {description?}>
    <style>
      margin-top: 32px;
      margin-bottom: 32px;
    </style>
  </Detail>
  {actions?}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="CoachMarkActions"
{className?}
{actions}
className:end="end">
    <style>
      display: flex;
      justify-content: space-between;

      width: 100%;

      &.end {
      justify-content: flex-end;
      }
    </style>
    {actions}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="CoachMarkAnchor" {style?} {className?}
  className:right="right">
  <style>
    position: fixed;
    width: 100%;
    z-index: 3;
    &.right div + div {
      left: -329px;
    }
  </style>

  <!-- dot -->
  <div>
    <style>
      background: #393939;
      padding: 12px;
      position: absolute;
    </style>
    <div>
      <style>
        border-radius: 12px;
        background: var(--primary-color, var(--brand-brand-60));
        width: 12px;
        height: 12px;
      </style>
    </div>
  </div>

  <div>
    <style>
      position: relative;
      top: 45px;
      left: 17px;
      transform: translateX(-18px);

    </style>
    {card}
  </div>
</div>



<!--
  @frame { visible: false }
-->
<CoachMark component as="CoachMarkPreview"
actions={<CoachMarkActions  actions={
    <fragment><Button >
      Skip tour
    </Button>
    <Button primary>
      Next
    </Button></fragment>} />}
steps={<ProgressPills>
    <ProgressPill />
    <ProgressPill active />
    <ProgressPill />
  </ProgressPills>} title={title || "Keep titles concise"} description={description || "Be considerate of the viewers time and patience. Use short bursts of information. Don't just point out the feature. Why is it important to the user?"}>

</CoachMark>

<!--
  @frame { visible: false }
-->
<CoachMark component as="CoachMarkPreviewLastStep"
actions={<CoachMarkActions  end actions={
    <Button primary>
      Get started
    </Button>} />}
steps={<ProgressPills>
    <ProgressPill />
    <ProgressPill />
    <ProgressPill active/>
  </ProgressPills>} title={title || "Keep titles concise"} description={description || "Be considerate of the viewers time and patience. Use short bursts of information. Don't just point out the feature. Why is it important to the user?"}>

</CoachMark>
<!--
  @frame { visible: false }
-->
<fragment component as="CoachMarkAnchorPreview">
  {children}
  <CoachMarkAnchor {style} card={<CoachMarkPreviewLastStep {title?} {description?} />} />
</fragment>


<!--
  @frame { title: "<CoachMark />", width: 1024, height: 797, x: 887, y: 448 }
-->
<utils.Preview padded className="v3">
  <CoachMarkPreview />

  <div>
    <style>
      margin: 32px 0px;
    </style>
    <CoachMarkAnchorPreview style="left: 75px;" card={<CoachMarkPreview />}>
      <Button primary>
        I'm an anchor!
      </Button>
    </CoachMarkAnchorPreview>
  </div>
</utils.Preview>

<!--------------------------------------------

Table

Figma: https://www.figma.com/file/6zLUxGQi6zqEkLdlkDlaDk/Components?node-id=2534%3A2150

-------------------------------------------->

<!--
  @frame { visible: false }
-->
<div export component as="Table"
  className="_table"
  className:companyAnalyses="company-analyses"
  className:secondary="secondary_table"
>
  <style>
    --cell-padding-x-wide: 50px;
    --cell-padding-x: 20px;
    --cell-padding-y: 10px;

    @include typography.font-main;
    font-size: 14px;

    &.company-analyses {
      ._header {
        ._cell {
          &:first-child {
            &::after {
              content: "x";
              color: transparent;
            }
          }
          &:last-child {
            padding-right: calc(var(--cell-padding-x) + 6px);
          }
        }
      }
      ._cell {
        &:first-child {
          flex-basis: 60%;
          padding-left: 14px;
          padding-right: 0;
        }
      }
  }
  </style>
  {children}
</div>



<!--
  @frame { visible: false }
-->
<div export component as="TableDataRows" className="_data-rows">
  <style>
    &:within(.company-analyses) {
      max-height: calc(4 * 42px);
      overflow-y: scroll;
      scrollbar-color:rgba(98, 98, 98, .5) #252525;
      scrollbar-width: thin;

      &::-webkit-scrollbar {
        width: 6px;
      }
      &::-webkit-scrollbar-track {
        background-color: #252525;
      }
      &::-webkit-scrollbar-thumb {
        background-color: rgba(98, 98, 98, .5);
      }
    }
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<div export component as="TableRow"
  {onClick?}
  className="_row"
  className:header="_header"
  className:selected="_selected"
>
  <style>

    display: flex;
    color: #F2F2F2;
    border-bottom: 1px solid var(--gray-gray-50);
    align-items: center;
    box-sizing: border-box;

    &._selected,
    &:hover:not(._header) {
      background-color: var(--gray-gray-70);
    }

    ._wide {
      padding-left: var(--cell-padding-x-wide);
      padding-right: var(--cell-padding-x-wide);
    }

    ._subtext {
      width: 100%;
      display: block;
      opacity: 0.72;
    }

    &._header {
      color: rgba(255, 255, 255, 0.72);
      border-bottom: none;
      padding-top: 0;
      padding-bottom: 0;
    }
    &:within(.secondary_table) {
      border: none;
      &._row {
        background-color: var(--gray-gray-70);
        padding:16px;
      }
      &._selected,
      &:hover:not(._header) {
        background-color: rgba(255, 255, 255, 0.12);
        position:relative;
        &:after {
            content: "";
            @include atoms.mask;
            width:6px;
            height: 12px;
            padding:12px;
            mask-image: url(@captec/design-system/src/feather/chevron-right.svg);
            color: #A2A2A2;
            right: 16px;
            position: absolute;
        }
      }
    }
  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="TableCell"
  {onClick?}
  {style?}
  {className?}
  className="_cell"
  className:selected="_selected"
  className:ascending="_ascending"
  className:descending="_descending"
  className:wideCells="_wide"
  className:sortable="sortable"
  className:nowrap="nowrap"
>
  <style>
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    padding: var(--cell-padding-y) var(--cell-padding-x);
    box-sizing: border-box;
    cursor: default;
    &.nowrap {
      flex-wrap: nowrap;
      white-space: nowrap;
    }
    &:within(.secondary_table ._header) {
        background-color:var(--gray-gray-70);
        &.sortable:after {
          --size: 1.2em;

          margin-left: 8px;
          @include atoms.mask;
          mask-image: url(@captec/design-system/src/feather/arrow-down.svg);
        }
    }
    &:within(._header) {
      background-color: var(--gray-gray-80);
      display: inline-flex;
      justify-content: initial;
      user-select: none;

      &.sortable:hover {
        cursor: pointer;
        background-color: var(--gray-gray-70);
      }

      &.sortable:after {
        --size: 1.2em;

        margin-left: 8px;
        @include atoms.mask;
        mask-image: url(@captec/design-system/src/feather/chevron-down.svg);
      }

      &.sortable._selected {
        &._ascending {
          &:after {
            mask-image: url(@captec/design-system/src/feather/arrow-up.svg);
          }
        }
        &._descending {
          &:after {
            mask-image: url(@captec/design-system/src/feather/arrow-down.svg);
          }
        }
      }
    }
  </style>
  {children}
</div>


<!--
  @frame { visible: false }
-->
<span export component as="Subtext" className="_subtext">
  {children}
</span>


<!--
  @frame { visible: false }
-->
<div export component as="TablePreview">
  <Table>
    <TableRow header>
      <TableCell selected descending>
        Company
      </TableCell>
      <TableCell>
        Account Owner
      </TableCell>
      <TableCell className="_cell"  style="width: 50%;">
        Status
      </TableCell>
    </TableRow>
    <TableDataRows>
      <TableRow>
        <TableCell>
          Eat Streat
        </TableCell>
        <TableCell>
          Elliot Lippner
          <Subtext>
            email@email.com
          </Subtext>
        </TableCell>
        <TableCell style="width: 50%;">
          Status
        </TableCell>
      </TableRow>
      <TableRow>
        <TableCell>
          Duck Squad
        </TableCell>
        <TableCell>
          Trevor Noah
          <Subtext>
            email@email.com
          </Subtext>
        </TableCell>
        <TableCell style="width: 50%;" nowrap>
          <div>Status</div>
          <MenuContainer>
            <MenuButton />
            <Menu absolute>
              <MenuItem>Item</MenuItem>
              <MenuItem selected>Another menu item</MenuItem>
              <MenuItem>Some super long menu item that needs chopping</MenuItem>
            </Menu>
          </MenuContainer>
        </TableCell>
      </TableRow>
    </TableDataRows>
  </Table>
</div>


<!--
  @frame { title: "<Table />", width: 1024, height: 768, x: 4471, y: 560 }
-->
<utils.Preview padded>
  <TablePreview />
</utils.Preview>
