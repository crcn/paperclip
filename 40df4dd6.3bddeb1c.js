(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{123:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,b=m["".concat(i,".").concat(u)]||m[u]||d[u]||a;return t?o.a.createElement(b,c(c({ref:n},s),{},{components:t})):o.a.createElement(b,c({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(6),a=(t(0),t(123)),i={id:"guide-migrating-to-paperclip",title:"Migration Code To And From Paperclip",sidebar_label:"Migrating Code"},c={id:"guide-migrating-to-paperclip",isDocsHomePage:!1,title:"Migration Code To And From Paperclip",description:"Migrating from CSS",source:"@site/docs/guide-migrating-to-paperclip.md",permalink:"/docs/guide-migrating-to-paperclip",editUrl:"https://github.com/crcn/paperclip/edit/master/packages/paperclip-website/docs/guide-migrating-to-paperclip.md",sidebar_label:"Migrating Code",sidebar:"docs",previous:{title:"Organizing Paperclip components",permalink:"/docs/guide-organization"},next:{title:"Using Third-party Libraries",permalink:"/docs/guide-third-party-libraries"}},l=[{value:"Migrating from CSS",id:"migrating-from-css",children:[]},{value:"Migrating from Styled Components, Emotion, etc",id:"migrating-from-styled-components-emotion-etc",children:[]}],s={rightToc:l};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"migrating-from-css"},"Migrating from CSS"),Object(a.b)("p",null,"All you need to do is copy & paste CSS into a Paperclip file. Here's an example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-css"}),".container {\n  font-family: sans-serif;\n  color: #F60;\n  font-size: 18px;\n}\n\n.content {\n  padding: 10px;\n}\n")),Object(a.b)("p",null,"\u261d After copying, wrap this stuff with ",Object(a.b)("inlineCode",{parentName:"p"},"@export"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  @export {\n    .container {\n      font-family: sans-serif;\n      color: #333;\n    }\n\n    .content {\n      padding: 10px;\n    }\n  }\n</style>\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"@export")," allows for your selectors to be used in other documents. Without it, these styles\nwould only work in the document the document they're defined in. "),Object(a.b)("p",null,"From there you can start using your styles:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html",metastring:"live",live:!0}),'// file: demo.pc\n<import src="./migrated-css.pc" as="migrated-css" />\n\n<div className="$migrated-css.container">\n  <div className="$migrated-css.content"> \n    Some content!\n  </div>\n</div>\n\n// file: migrated-css.pc\n\n<style>\n  @export {\n    .container {\n      font-family: sans-serif;\n      color: #F60;\n      font-size: 18px;\n    }\n\n    .content {\n      padding: 10px;\n    }\n  }\n</style>\n')),Object(a.b)("h3",{id:"migrating-from-styled-components-emotion-etc"},"Migrating from Styled Components, Emotion, etc"),Object(a.b)("p",null,"For the most part, translating styled components to Paperclip is a 1-1 map. Here's an example of some styled components:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'import styled from "styled-component";\nimport theme from "path/to/my/theme";\n\nexport const Button = styled.button`\n  font-family: ${theme.fontFamily1};\n  font-size: ${theme.fontSize1};\n  padding: 8px 16px;\n  border: 2px solid ${theme.borderColor1};\n  display: inline-block;\n  border-radius: 99px;\n  ${({secondary}) => secondary ? `\n    background: ${theme.backgroundAlt1};\n    color: ${theme.textColorAlt1};\n  ` : ""}\n`;\n\n')),Object(a.b)("p",null,"The translation to Paperclip would be this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html",metastring:"live",live:!0}),'// file: button.pc\n<import src="./theme.pc" as="theme" />\n<style>\n  .Button {\n    font-family: var(--font-1);\n    font-size: var(--font-size-1);\n    padding: 8px 16px;\n    border: 2px solid var(--border-color-1);\n    display: inline-block;\n    border-radius: 99px;\n    &--secondary {\n      background: var(--background-alt-1);\n      color: var(--text-color-alt-1);\n    }\n  }\n</style>\n\n<button export component as="Button" \n  className="Button" \n  className:secondary="Button--secondary">\n  {children}\n</button>\n\n<Button>\n  Primary Button\n</Button>\n\n<Button secondary>\n  Secondary Button\n</Button>\n\n// file: theme.pc\n\n<style>\n  :root {\n    --font-1: Helvetica;\n    --font-size-1: 18px;\n    --text-color-1: #222;\n    --border-color-1: #333;\n    --background-alt-1: #333;\n    --text-color-alt-1: #FFF;\n  }\n</style>\n')),Object(a.b)("p",null,"After migrating from Emotion / styled-components / etc, all you need to do is change your styled component imports:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'\n// Change this:\n// import { Button } from "./styles.tsx";\n\n// To this: \nimport { Button } from "./styles.pc";\n\n// Everything else remains the same.\n<Button />\n<Button secondary />\n')))}p.isMDXComponent=!0}}]);