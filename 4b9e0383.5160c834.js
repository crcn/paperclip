(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{121:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||l;return n?r.a.createElement(d,i(i({ref:t},c),{},{components:n})):r.a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),l=(n(0),n(121)),o={id:"usage-troubleshooting",title:"Troubleshooting",sidebar_label:"Troubleshooting"},i={id:"usage-troubleshooting",isDocsHomePage:!1,title:"Troubleshooting",description:"Not necessarily gotchas, but things to be aware of when you're using Paperclip.",source:"@site/docs/usage-troubleshooting.md",permalink:"/docs/usage-troubleshooting",editUrl:"https://github.com/crcn/paperclip/edit/master/packages/paperclip-website/docs/usage-troubleshooting.md",sidebar_label:"Troubleshooting"},s=[{value:"Can&#39;t override variant styles",id:"cant-override-variant-styles",children:[]},{value:"CSS is being applied outside of Paperclip",id:"css-is-being-applied-outside-of-paperclip",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Not necessarily gotchas, but things to be aware of when you're using Paperclip."),Object(l.b)("h2",{id:"cant-override-variant-styles"},"Can't override variant styles"),Object(l.b)("p",null,"You may be dealing with CSS specificity issues. Suppose that you have an input:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .input {\n    &.xsmall {\n      color: blue;\n    }\n  }\n</style>\n\n<input export component as="default" className="input {className?}" className:xsmall>\n')),Object(l.b)("p",null,"And then you have another component that's using TextInput:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<import as="TextInput" src="./text-input.pc">\n\n<style>\n  .TextColorOverride {\n    color: red;\n  }\n</style>\n\n<TextInput className=">>>TextColorOverride" xsmall>\n')),Object(l.b)("p",null,"\u261d\ud83c\udffb ",Object(l.b)("inlineCode",{parentName:"p"},"TextColorOverride")," won't actually be applied. This is because to native CSS, the xsmall selector has a ",Object(l.b)("em",{parentName:"p"},"higher priority"),". Here's an example to illustrate this:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .input.small {\n    color: red;\n  }\n  .input-override {\n    color: blue;\n  }\n</style>\n\n<input type="text" class="input small input-override" value="I should be blue!">\n')),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://jsfiddle.net/hL20se4m/"}),"https://jsfiddle.net/hL20se4m/"))),Object(l.b)("p",null,"\u261d\ud83c\udffb This HTML has the same effect as our Paperclip UI code above. Basically, style rules that have more class & attribute selectors have a higher priority. "),Object(l.b)("h4",{id:"how-do-you-fix-this"},"How do you fix this?"),Object(l.b)("p",null,"Just flatten your variants. For example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .input {\n    &-xsmall {\n      color: blue;\n    }\n  }\n</style>\n\n<input export component as="default" className="input {className?}" className:xsmall="input-xsmall">\n')),Object(l.b)("p",null,"And ",Object(l.b)("em",{parentName:"p"},"then")," you can apply style overrides:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<import as="TextInput" src="./text-input.pc">\n\n<style>\n  .TextColorOverride {\n    color: red;\n  }\n</style>\n\n<TextInput className=">>>TextColorOverride" xsmall>\n')),Object(l.b)("p",null,"\u261d\ud83c\udffb In this case, ",Object(l.b)("inlineCode",{parentName:"p"},"TextColorOverride")," properties will be applied. "),Object(l.b)("h2",{id:"css-is-being-applied-outside-of-paperclip"},"CSS is being applied outside of Paperclip"),Object(l.b)("p",null,"The most common cause of this is if you have a CSS class name defined within Paperclip that is also defined globally\nin your application. For example, here's a PC file:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n\n  /* very common name that could be defined globally, especially in third-party CSS */\n  .header {\n\n  }\n</style>\n\n<div className="header">\n</div>\n')),Object(l.b)("p",null,"If you're coming from global CSS & have ",Object(l.b)("inlineCode",{parentName:"p"},".header")," defined, then the template above will also catch that style. "),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"The reason for this is because class names in Paperclip are compiled to ",Object(l.b)("em",{parentName:"p"},"scoped")," + ",Object(l.b)("em",{parentName:"p"},"global")," parts. ",Object(l.b)("inlineCode",{parentName:"p"},'<div className="header">')," for example is compiled to ",Object(l.b)("inlineCode",{parentName:"p"},'<div className="_document-scope_header header">'),". This is by design to allow for ",Object(l.b)("inlineCode",{parentName:"p"},":global")," selectors to be applied when you need it. ")),Object(l.b)("p",null,"The fix for this is either:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Remove the global CSS. I think this is preferrable since to me, I don't think there shouldn't be any global CSS to begin with (aside from edge cases)."),Object(l.b)("li",{parentName:"ul"},"Use a prefix in your class names such as ",Object(l.b)("inlineCode",{parentName:"li"},"_")," (much like private ",Object(l.b)("inlineCode",{parentName:"li"},"_")," properties in JavaScript) to add some safety from this happening again. ")))}p.isMDXComponent=!0}}]);