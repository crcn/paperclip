(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{102:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),i=n(6),a=(n(0),n(109)),o={id:"safety-visual-regression",title:"Setting up visual regression tests",sidebar_label:"Visual regression testing"},s={id:"safety-visual-regression",isDocsHomePage:!1,title:"Setting up visual regression tests",description:"Installation",source:"@site/docs/safety-visual-regresion.md",permalink:"/docs/safety-visual-regression",editUrl:"https://github.com/crcn/paperclip/packages/edit/master/website/docs/safety-visual-regresion.md",sidebar_label:"Visual regression testing",sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/docs/usage-troubleshooting"},next:{title:"Type definition files",permalink:"/docs/safety-definition-files"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Setting up with GitHub actions",id:"setting-up-with-github-actions",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"Paperclip integrates with ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://percy.io"}),"Percy")," to allow you test for CSS bugs in your Paperclip UI files. To get started, install the NPM module:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"npm install percy percy-paperclip --save-dev\n")),Object(a.b)("p",null,"Next, grab your percy token, then run the following command in the same directory as your ",Object(a.b)("inlineCode",{parentName:"p"},"paperclip.config.json")," file:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"PERCY_TOKEN=[TOKEN] percy exec -- percy-paperclip\n")),Object(a.b)("p",null,"After that, you should see something like this:"),Object(a.b)("p",null,Object(a.b)("img",Object(r.a)({parentName:"p"},{src:"/img/snapshot.gif",alt:"Percy demo"}))),Object(a.b)("h2",{id:"setting-up-with-github-actions"},"Setting up with GitHub actions"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"percy-paperclip")," pairs nicely with GitHub actions, especially for PR checks. Here's a GitHub action you can use: "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),'name: PR Checks\non:  \n  pull_request\n\njobs:\n  visual-regression-test:\n    name: Visual Regression Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0 # fetches all branches\n      - name: Maybe snapshot\n        run: |\n          CHANGED_PC_FILES=$(git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }} -- "./**/*.pc")\n          if [ -n "$CHANGED_PC_FILES" ]; then\n            yarn add percy percy-paperclip\n            percy exec -- percy-paperclip\n          fi\n        working-directory: ./path/to/frontend\n        env: \n          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Be sure to change ",Object(a.b)("inlineCode",{parentName:"p"},"working-directory")," to point to where your ",Object(a.b)("inlineCode",{parentName:"p"},"paperclip.config.json")," file is. ")),Object(a.b)("p",null,"\u261d\ud83c\udffb This script will run only when PC files change, so if you're working with people working on the back-end, for instance, they won't get this check (since we're assuming they won't touch PC files). "),Object(a.b)("p",null,"To go along with the script above, you'll need to set up a ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.percy.io/docs/baseline-picking-logic"}),"baseline")," for your master branch. Here's a script for that:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),'name: Master Checks\non:\n  push:\n    branches:\n      - master\n    \njobs:\n  visual-regression-test:\n    name: Visual Regression Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Maybe snapshot\n        run: |\n          CHANGED_PC_FILES=$(git diff --name-only origin/master^ origin/master -- "./**/*.pc")\n          if [ -n "$CHANGED_PC_FILES" ]; then\n            yarn add percy\n            yarn snapshot\n          fi\n        working-directory: ./path/to/frontend\n        env: \n          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}\n          \n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Again, be sure to change ",Object(a.b)("inlineCode",{parentName:"p"},"working-directory")," to point to where your ",Object(a.b)("inlineCode",{parentName:"p"},"paperclip.config.json")," file is. ")),Object(a.b)("p",null,"\u261d\ud83c\udffb This script runs whenever a ",Object(a.b)("inlineCode",{parentName:"p"},"*.pc")," file changes on master, and ensures that subsequent PRs are visually testing against the correct baseline."))}p.isMDXComponent=!0},109:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),f=r,g=u["".concat(o,".").concat(f)]||u[f]||b[f]||a;return n?i.a.createElement(g,s(s({ref:t},l),{},{components:n})):i.a.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);